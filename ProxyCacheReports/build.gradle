plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.electoral'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'
    implementation 'ch.qos.logback:logback-core:1.5.3'
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    '../ReportsSystem',
                    '../VoteNotification'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

application {
    mainClass = 'org.votaciones.ProxyCacheServer'
}

// =================== CONFIGURACIÃ“N DE FAT JAR ===================
shadowJar {
    archiveClassifier.set('')
    archiveVersion.set('1.0.0')
    archiveBaseName.set('proxycache-reports-fat')

    manifest {
        attributes(
                'Main-Class': 'org.votaciones.ProxyCacheServer',
                'Implementation-Title': 'ProxyCache Reports',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().toString()
        )
    }

    // Incluir recursos
    from('src/main/resources') {
        into('/')
    }

    // Incluir archivos de configuraciÃ³n
    from('.') {
        include 'proxycache.cfg'
        into('/')
    }

    // Incluir directorios de configuraciÃ³n
    from('config') {
        into('config')
    }

    // Resolver conflictos de archivos duplicados
    mergeServiceFiles()

    // Excluir archivos problemÃ¡ticos
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/MANIFEST.MF'

    // Incluir dependencias transitivas
    configurations = [project.configurations.runtimeClasspath]

    // Transformaciones especÃ­ficas
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer)
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'reference.conf'
    }

    doLast {
        println "ProxyCacheReports Fat JAR creado: ${archiveFile.get().asFile.absolutePath}"
        println "TamaÃ±o: ${archiveFile.get().asFile.length() / (1024 * 1024)} MB"
    }
}

// Hacer que 'build' genere el fat jar por defecto
build.dependsOn shadowJar

// =================== TAREAS EXISTENTES ACTUALIZADAS ===================
// JAR normal (sin dependencias)
jar {
    archiveBaseName = 'proxycache-reports'
    archiveVersion = '1.0.0'
    archiveClassifier.set('thin')

    manifest {
        attributes(
                'Main-Class': 'org.votaciones.ProxyCacheServer',
                'Implementation-Title': 'ProxyCache Reports',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().toString()
        )
    }
}

// Nueva tarea para probar el fat jar
task runFatJar(type: JavaExec) {
    group = 'application'
    description = 'Ejecuta el proxycache fat jar generado'
    classpath = files("${buildDir}/libs/proxycache-reports-fat-1.0.0.jar")
    mainClass = 'org.votaciones.ProxyCacheServer'
    dependsOn shadowJar
}

task runProxyCache(type: JavaExec) {
    group = 'application'
    description = 'Ejecuta el ProxyCache de Reports'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ProxyCacheServer'
    args = ['--Ice.Config=src/main/resources/proxycache.cfg']
    jvmArgs = ['-Xmx512m', '-Xms256m']
}

task cleanCache {
    group = 'development'
    description = 'Limpia archivos de cache y logs'
    doLast {
        delete fileTree(dir: 'data', include: '**/*')
        delete fileTree(dir: 'logs', include: '**/*')
        println 'ðŸ§¹ Cache y logs limpiados'
    }
}

task checkConnection(type: JavaExec) {
    group = 'verification'
    description = 'Verifica conexiÃ³n al servidor principal de Reports'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ConnectionTest'
    args = ['--Ice.Config=src/main/resources/proxycache.cfg']
}

task developmentRun(type: JavaExec) {
    group = 'development'
    description = 'Ejecuta ProxyCache en modo desarrollo con debug'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ProxyCacheServer'
    args = ['--Ice.Config=src/main/resources/proxycache.cfg']

    jvmArgs = [
            '-Xmx512m',
            '-Xms256m',
            '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
    ]

    environment 'PROXY_CACHE_ENV', 'development'
    environment 'LOG_LEVEL', 'DEBUG'
}

task verifyIceClasses {
    group = 'verification'
    description = 'Verifica que las clases Ice generadas estÃ©n disponibles'
    doLast {
        def reportsServiceFile = file('../ReportsSystem/ReportsService.java')
        def reportsServicePrxFile = file('../ReportsSystem/ReportsServicePrx.java')

        if (!reportsServiceFile.exists()) {
            throw new GradleException('No se encontrÃ³ ReportsService.java en ../ReportsSystem/')
        }
        if (!reportsServicePrxFile.exists()) {
            throw new GradleException('No se encontrÃ³ ReportsServicePrx.java en ../ReportsSystem/')
        }

        println 'Clases Ice encontradas correctamente'
        println "   - ${reportsServiceFile.absolutePath}"
        println "   - ${reportsServicePrxFile.absolutePath}"
    }
}

// Tarea para verificar la estructura del proyecto
task verifyProjectStructure {
    group = 'verification'
    description = 'Verifica que todos los archivos necesarios estÃ©n presentes'
    doLast {
        println "Verificando estructura del proyecto ProxyCacheReports:"

        def mainFiles = [
                'src/main/java',
                'src/main/resources/proxycache.cfg',
                '../ReportsSystem',
                '../VoteNotification'
        ]

        mainFiles.each { fileName ->
            def file = file(fileName)
            if (file.exists()) {
                println "   âœ“ ${fileName}"
            } else {
                println "   âœ— ${fileName} - NO ENCONTRADO"
            }
        }

        def javaFiles = fileTree(dir: 'src/main/java', include: '**/*.java')
        println "\nArchivos Java principales encontrados:"
        javaFiles.each { println "   - ${it.name}" }
    }
}

distributions {
    main {
        distributionBaseName = 'proxycache-reports'
        contents {
            from shadowJar
            from 'src/main/resources'
            into('bin') {
                from 'scripts'
                fileMode = 0755
            }
        }
    }
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
    dependsOn verifyIceClasses
    dependsOn verifyProjectStructure
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// Asegurar que las verificaciones se ejecuten antes del shadowJar
shadowJar.dependsOn verifyIceClasses

clean {
    delete 'data'
    delete 'logs'
    delete 'cache'
    delete 'build'
}