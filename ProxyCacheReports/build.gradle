
plugins {
    id 'java'
    id 'application'
}

group = 'org.votaciones'
version = '1.0'
sourceCompatibility = '11'
targetCompatibility = '11'

application {
    mainClass = 'org.votaciones.ProxyCacheServer'
}

sourceSets {
    main {
        java {

            srcDirs = ['src/main/java']
            srcDirs += ['../ReportsSystem']
            srcDirs += ['../VoteNotification']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.10'

    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.12'
    implementation 'ch.qos.logback:logback-core:1.2.12'

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

compileTestJava {
    options.encoding = 'UTF-8'
}


task runProxyCache(type: JavaExec) {
    group = 'application'
    description = 'Ejecuta el ProxyCache de Reports'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ProxyCacheServer'


    args = ['--Ice.Config=src/main/resources/proxycache.cfg']


    jvmArgs = ['-Xmx512m', '-Xms256m']
}


task cleanCache {
    group = 'development'
    description = 'Limpia archivos de cache y logs'
    doLast {
        delete fileTree(dir: 'data', include: '**/*')
        delete fileTree(dir: 'logs', include: '**/*')
        println 'üßπ Cache y logs limpiados'
    }
}


task checkConnection(type: JavaExec) {
    group = 'verification'
    description = 'Verifica conexi√≥n al servidor principal de Reports'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ConnectionTest'
    args = ['--Ice.Config=src/main/resources/proxycache.cfg']
}


jar {
    archiveBaseName = 'proxycache-reports'
    archiveVersion = '1.0'

    manifest {
        attributes(
                'Main-Class': 'org.votaciones.ProxyCacheServer',
                'Implementation-Title': 'ProxyCache Reports',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().toString()
        )
    }
}

// =================== CONFIGURACI√ìN DE FAT JAR ===================
task fatJar(type: Jar) {
    group = 'build'
    description = 'Crea un JAR ejecutable con todas las dependencias'
    archiveBaseName = 'proxycache-reports-standalone'
    archiveVersion = '1.0'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    manifest {
        attributes(
                'Main-Class': 'org.votaciones.ProxyCacheServer',
                'Implementation-Title': 'ProxyCache Reports Standalone',
                'Implementation-Version': version
        )
    }
}


task developmentRun(type: JavaExec) {
    group = 'development'
    description = 'Ejecuta ProxyCache en modo desarrollo con debug'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.ProxyCacheServer'
    args = ['--Ice.Config=src/main/resources/proxycache.cfg']

    // Habilitar debug
    jvmArgs = [
            '-Xmx512m',
            '-Xms256m',
            '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
    ]

    // Variables de entorno para desarrollo
    environment 'PROXY_CACHE_ENV', 'development'
    environment 'LOG_LEVEL', 'DEBUG'
}

distributions {
    main {
        distributionBaseName = 'proxycache-reports'
        contents {
            from jar
            from configurations.runtimeClasspath
            from 'src/main/resources'
            into('bin') {
                from 'scripts'
                fileMode = 0755
            }
        }
    }
}


test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}


task verifyIceClasses {
    group = 'verification'
    description = 'Verifica que las clases Ice generadas est√©n disponibles'
    doLast {
        def reportsServiceFile = file('../ReportsSystem/ReportsService.java')
        def reportsServicePrxFile = file('../ReportsSystem/ReportsServicePrx.java')

        if (!reportsServiceFile.exists()) {
            throw new GradleException('No se encontr√≥ ReportsService.java en ../ReportsSystem/')
        }
        if (!reportsServicePrxFile.exists()) {
            throw new GradleException('No se encontr√≥ ReportsServicePrx.java en ../ReportsSystem/')
        }

        println 'Clases Ice encontradas correctamente'
        println "   - ${reportsServiceFile.absolutePath}"
        println "   - ${reportsServicePrxFile.absolutePath}"
    }
}


compileJava.dependsOn verifyIceClasses
build.dependsOn fatJar


clean {
    delete 'data'
    delete 'logs'
    delete 'cache'
}