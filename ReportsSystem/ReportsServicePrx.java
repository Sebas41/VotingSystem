//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ReportsSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ReportsSystem;

public interface ReportsServicePrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Obtiene el reporte completo de un ciudadano
     **/
    default String getCitizenReports(String documento, int electionId)
    {
        return getCitizenReports(documento, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene el reporte completo de un ciudadano
     * @param context The Context map to send with the invocation.
     **/
    default String getCitizenReports(String documento, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getCitizenReportsAsync(documento, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene el reporte completo de un ciudadano
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getCitizenReportsAsync(String documento, int electionId)
    {
        return _iceI_getCitizenReportsAsync(documento, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene el reporte completo de un ciudadano
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getCitizenReportsAsync(String documento, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getCitizenReportsAsync(documento, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_documento -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getCitizenReportsAsync(String iceP_documento, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCitizenReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_documento);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Busca ciudadanos por nombre y apellido
     **/
    default String[] searchCitizenReports(String nombre, String apellido, int electionId, int limit)
    {
        return searchCitizenReports(nombre, apellido, electionId, limit, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Busca ciudadanos por nombre y apellido
     * @param context The Context map to send with the invocation.
     **/
    default String[] searchCitizenReports(String nombre, String apellido, int electionId, int limit, java.util.Map<String, String> context)
    {
        return _iceI_searchCitizenReportsAsync(nombre, apellido, electionId, limit, context, true).waitForResponse();
    }

    /**
     * Busca ciudadanos por nombre y apellido
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> searchCitizenReportsAsync(String nombre, String apellido, int electionId, int limit)
    {
        return _iceI_searchCitizenReportsAsync(nombre, apellido, electionId, limit, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Busca ciudadanos por nombre y apellido
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> searchCitizenReportsAsync(String nombre, String apellido, int electionId, int limit, java.util.Map<String, String> context)
    {
        return _iceI_searchCitizenReportsAsync(nombre, apellido, electionId, limit, context, false);
    }

    /**
     * @hidden
     * @param iceP_nombre -
     * @param iceP_apellido -
     * @param iceP_electionId -
     * @param iceP_limit -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_searchCitizenReportsAsync(String iceP_nombre, String iceP_apellido, int iceP_electionId, int iceP_limit, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "searchCitizenReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_nombre);
                     ostr.writeString(iceP_apellido);
                     ostr.writeInt(iceP_electionId);
                     ostr.writeInt(iceP_limit);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene todos los ciudadanos de una mesa
     **/
    default String[] getMesaCitizenReports(int mesaId, int electionId)
    {
        return getMesaCitizenReports(mesaId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene todos los ciudadanos de una mesa
     * @param context The Context map to send with the invocation.
     **/
    default String[] getMesaCitizenReports(int mesaId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMesaCitizenReportsAsync(mesaId, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene todos los ciudadanos de una mesa
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMesaCitizenReportsAsync(int mesaId, int electionId)
    {
        return _iceI_getMesaCitizenReportsAsync(mesaId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene todos los ciudadanos de una mesa
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMesaCitizenReportsAsync(int mesaId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMesaCitizenReportsAsync(mesaId, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_mesaId -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getMesaCitizenReportsAsync(int iceP_mesaId, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMesaCitizenReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_mesaId);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Valida si un ciudadano es elegible para votar
     **/
    default boolean validateCitizenEligibility(String documento)
    {
        return validateCitizenEligibility(documento, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Valida si un ciudadano es elegible para votar
     * @param context The Context map to send with the invocation.
     **/
    default boolean validateCitizenEligibility(String documento, java.util.Map<String, String> context)
    {
        return _iceI_validateCitizenEligibilityAsync(documento, context, true).waitForResponse();
    }

    /**
     * Valida si un ciudadano es elegible para votar
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validateCitizenEligibilityAsync(String documento)
    {
        return _iceI_validateCitizenEligibilityAsync(documento, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Valida si un ciudadano es elegible para votar
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validateCitizenEligibilityAsync(String documento, java.util.Map<String, String> context)
    {
        return _iceI_validateCitizenEligibilityAsync(documento, context, false);
    }

    /**
     * @hidden
     * @param iceP_documento -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_validateCitizenEligibilityAsync(String iceP_documento, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "validateCitizenEligibility", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_documento);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene el reporte de resultados de una elecci√≥n
     **/
    default String getElectionReports(int electionId)
    {
        return getElectionReports(electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene el reporte de resultados de una elecci√≥n
     * @param context The Context map to send with the invocation.
     **/
    default String getElectionReports(int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getElectionReportsAsync(electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene el reporte de resultados de una elecci√≥n
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getElectionReportsAsync(int electionId)
    {
        return _iceI_getElectionReportsAsync(electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene el reporte de resultados de una elecci√≥n
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getElectionReportsAsync(int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getElectionReportsAsync(electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getElectionReportsAsync(int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getElectionReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene la lista de elecciones disponibles
     **/
    default String[] getAvailableElections()
    {
        return getAvailableElections(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene la lista de elecciones disponibles
     * @param context The Context map to send with the invocation.
     **/
    default String[] getAvailableElections(java.util.Map<String, String> context)
    {
        return _iceI_getAvailableElectionsAsync(context, true).waitForResponse();
    }

    /**
     * Obtiene la lista de elecciones disponibles
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getAvailableElectionsAsync()
    {
        return _iceI_getAvailableElectionsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene la lista de elecciones disponibles
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getAvailableElectionsAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAvailableElectionsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getAvailableElectionsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getAvailableElections", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Verifica si los reportes est√°n listos para una elecci√≥n
     **/
    default boolean areReportsReady(int electionId)
    {
        return areReportsReady(electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Verifica si los reportes est√°n listos para una elecci√≥n
     * @param context The Context map to send with the invocation.
     **/
    default boolean areReportsReady(int electionId, java.util.Map<String, String> context)
    {
        return _iceI_areReportsReadyAsync(electionId, context, true).waitForResponse();
    }

    /**
     * Verifica si los reportes est√°n listos para una elecci√≥n
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areReportsReadyAsync(int electionId)
    {
        return _iceI_areReportsReadyAsync(electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Verifica si los reportes est√°n listos para una elecci√≥n
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areReportsReadyAsync(int electionId, java.util.Map<String, String> context)
    {
        return _iceI_areReportsReadyAsync(electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_areReportsReadyAsync(int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "areReportsReady", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene reportes geogr√°ficos (departamento, municipio, puesto)
     **/
    default String getGeographicReports(int locationId, String locationType, int electionId)
    {
        return getGeographicReports(locationId, locationType, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene reportes geogr√°ficos (departamento, municipio, puesto)
     * @param context The Context map to send with the invocation.
     **/
    default String getGeographicReports(int locationId, String locationType, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getGeographicReportsAsync(locationId, locationType, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene reportes geogr√°ficos (departamento, municipio, puesto)
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getGeographicReportsAsync(int locationId, String locationType, int electionId)
    {
        return _iceI_getGeographicReportsAsync(locationId, locationType, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene reportes geogr√°ficos (departamento, municipio, puesto)
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getGeographicReportsAsync(int locationId, String locationType, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getGeographicReportsAsync(locationId, locationType, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_locationId -
     * @param iceP_locationType -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getGeographicReportsAsync(int iceP_locationId, String iceP_locationType, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getGeographicReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_locationId);
                     ostr.writeString(iceP_locationType);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Precarga reportes de manera inteligente seg√∫n el tipo
     **/
    default String preloadReports(int electionId, String locationType, int locationId)
    {
        return preloadReports(electionId, locationType, locationId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Precarga reportes de manera inteligente seg√∫n el tipo
     * @param context The Context map to send with the invocation.
     **/
    default String preloadReports(int electionId, String locationType, int locationId, java.util.Map<String, String> context)
    {
        return _iceI_preloadReportsAsync(electionId, locationType, locationId, context, true).waitForResponse();
    }

    /**
     * Precarga reportes de manera inteligente seg√∫n el tipo
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> preloadReportsAsync(int electionId, String locationType, int locationId)
    {
        return _iceI_preloadReportsAsync(electionId, locationType, locationId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Precarga reportes de manera inteligente seg√∫n el tipo
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> preloadReportsAsync(int electionId, String locationType, int locationId, java.util.Map<String, String> context)
    {
        return _iceI_preloadReportsAsync(electionId, locationType, locationId, context, false);
    }

    /**
     * @hidden
     * @param iceP_electionId -
     * @param iceP_locationType -
     * @param iceP_locationId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_preloadReportsAsync(int iceP_electionId, String iceP_locationType, int iceP_locationId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "preloadReports", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_electionId);
                     ostr.writeString(iceP_locationType);
                     ostr.writeInt(iceP_locationId);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene estad√≠sticas del cache
     **/
    default String getCacheStats()
    {
        return getCacheStats(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene estad√≠sticas del cache
     * @param context The Context map to send with the invocation.
     **/
    default String getCacheStats(java.util.Map<String, String> context)
    {
        return _iceI_getCacheStatsAsync(context, true).waitForResponse();
    }

    /**
     * Obtiene estad√≠sticas del cache
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getCacheStatsAsync()
    {
        return _iceI_getCacheStatsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene estad√≠sticas del cache
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getCacheStatsAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCacheStatsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getCacheStatsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCacheStats", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un departamento
     **/
    default String[] getDepartmentCitizenDocuments(int departmentId, int electionId)
    {
        return getDepartmentCitizenDocuments(departmentId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un departamento
     * @param context The Context map to send with the invocation.
     **/
    default String[] getDepartmentCitizenDocuments(int departmentId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getDepartmentCitizenDocumentsAsync(departmentId, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un departamento
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getDepartmentCitizenDocumentsAsync(int departmentId, int electionId)
    {
        return _iceI_getDepartmentCitizenDocumentsAsync(departmentId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un departamento
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getDepartmentCitizenDocumentsAsync(int departmentId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getDepartmentCitizenDocumentsAsync(departmentId, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_departmentId -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getDepartmentCitizenDocumentsAsync(int iceP_departmentId, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDepartmentCitizenDocuments", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_departmentId);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un municipio
     **/
    default String[] getMunicipalityCitizenDocuments(int municipalityId, int electionId)
    {
        return getMunicipalityCitizenDocuments(municipalityId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un municipio
     * @param context The Context map to send with the invocation.
     **/
    default String[] getMunicipalityCitizenDocuments(int municipalityId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMunicipalityCitizenDocumentsAsync(municipalityId, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un municipio
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMunicipalityCitizenDocumentsAsync(int municipalityId, int electionId)
    {
        return _iceI_getMunicipalityCitizenDocumentsAsync(municipalityId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un municipio
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMunicipalityCitizenDocumentsAsync(int municipalityId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMunicipalityCitizenDocumentsAsync(municipalityId, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_municipalityId -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getMunicipalityCitizenDocumentsAsync(int iceP_municipalityId, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMunicipalityCitizenDocuments", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_municipalityId);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un puesto
     **/
    default String[] getPuestoCitizenDocuments(int puestoId, int electionId)
    {
        return getPuestoCitizenDocuments(puestoId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un puesto
     * @param context The Context map to send with the invocation.
     **/
    default String[] getPuestoCitizenDocuments(int puestoId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getPuestoCitizenDocumentsAsync(puestoId, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un puesto
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getPuestoCitizenDocumentsAsync(int puestoId, int electionId)
    {
        return _iceI_getPuestoCitizenDocumentsAsync(puestoId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene los documentos de todos los ciudadanos de un puesto
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getPuestoCitizenDocumentsAsync(int puestoId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getPuestoCitizenDocumentsAsync(puestoId, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_puestoId -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getPuestoCitizenDocumentsAsync(int iceP_puestoId, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getPuestoCitizenDocuments", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_puestoId);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Obtiene los documentos de ciudadanos de una mesa espec√≠fica
     **/
    default String[] getMesaCitizenDocuments(int mesaId, int electionId)
    {
        return getMesaCitizenDocuments(mesaId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Obtiene los documentos de ciudadanos de una mesa espec√≠fica
     * @param context The Context map to send with the invocation.
     **/
    default String[] getMesaCitizenDocuments(int mesaId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMesaCitizenDocumentsAsync(mesaId, electionId, context, true).waitForResponse();
    }

    /**
     * Obtiene los documentos de ciudadanos de una mesa espec√≠fica
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMesaCitizenDocumentsAsync(int mesaId, int electionId)
    {
        return _iceI_getMesaCitizenDocumentsAsync(mesaId, electionId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Obtiene los documentos de ciudadanos de una mesa espec√≠fica
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getMesaCitizenDocumentsAsync(int mesaId, int electionId, java.util.Map<String, String> context)
    {
        return _iceI_getMesaCitizenDocumentsAsync(mesaId, electionId, context, false);
    }

    /**
     * @hidden
     * @param iceP_mesaId -
     * @param iceP_electionId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getMesaCitizenDocumentsAsync(int iceP_mesaId, int iceP_electionId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMesaCitizenDocuments", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_mesaId);
                     ostr.writeInt(iceP_electionId);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReportsServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReportsServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReportsServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReportsServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ReportsServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ReportsServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, ReportsServicePrx.class, _ReportsServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default ReportsServicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (ReportsServicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default ReportsServicePrx ice_adapterId(String newAdapterId)
    {
        return (ReportsServicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default ReportsServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (ReportsServicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default ReportsServicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (ReportsServicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default ReportsServicePrx ice_invocationTimeout(int newTimeout)
    {
        return (ReportsServicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default ReportsServicePrx ice_connectionCached(boolean newCache)
    {
        return (ReportsServicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default ReportsServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (ReportsServicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default ReportsServicePrx ice_secure(boolean b)
    {
        return (ReportsServicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default ReportsServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (ReportsServicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default ReportsServicePrx ice_preferSecure(boolean b)
    {
        return (ReportsServicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default ReportsServicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (ReportsServicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default ReportsServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (ReportsServicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default ReportsServicePrx ice_collocationOptimized(boolean b)
    {
        return (ReportsServicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default ReportsServicePrx ice_twoway()
    {
        return (ReportsServicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default ReportsServicePrx ice_oneway()
    {
        return (ReportsServicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default ReportsServicePrx ice_batchOneway()
    {
        return (ReportsServicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default ReportsServicePrx ice_datagram()
    {
        return (ReportsServicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default ReportsServicePrx ice_batchDatagram()
    {
        return (ReportsServicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default ReportsServicePrx ice_compress(boolean co)
    {
        return (ReportsServicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default ReportsServicePrx ice_timeout(int t)
    {
        return (ReportsServicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default ReportsServicePrx ice_connectionId(String connectionId)
    {
        return (ReportsServicePrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default ReportsServicePrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (ReportsServicePrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::ReportsSystem::ReportsService";
    }
}
