package controller;

import Autentication.AutenticationVoter;
import Autentication.AutenticationVoterInterface;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.Util;
import configuration.ConfigurationReceiverImpl;
import ConfigurationSystem.ConfigurationReceiver;
import model.Vote;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSourcePrx;
import ui.VotingMachineUI;
import votation.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.util.Properties;

/**
 * ‚úÖ CONTROLADOR COMPLETO CON:
 * - Configuraci√≥n remota
 * - Persistencia del estado de configuraci√≥n
 * - Recarga autom√°tica de repositorios
 * - Manejo robusto de errores
 * - ‚úÖ NUEVO: Validaci√≥n de horarios de jornada electoral
 */
public class ControllerVoteUI {
    // =================== COMPONENTES PRINCIPALES ===================
    private VotationInterface voteRepo;
    private AutenticationVoterInterface authVoter;
    private ElectionInterface electionRepo;
    private Election election;

    // =================== COMUNICACI√ìN ICE ===================
    private Communicator com;
    private RMSourcePrx rm;
    private RMDestinationPrx dest;
    private ObjectMapper mapper;

    // =================== UI Y DATOS ===================
    private InetAddress ip;
    private VotingMachineUI ui;
    private String currentVoterId;

    // =================== CONFIGURACI√ìN REMOTA ===================
    private ConfigurationReceiverImpl configurationReceiver;
    private ObjectAdapter configurationAdapter;

    // ‚úÖ NUEVO: Estado de configuraci√≥n persistente
    private static final String CONFIG_STATE_FILE = "client/config/configuration_state.properties";
    private boolean isConfiguredFromServer = false;
    private String lastConfigurationVersion = "";

    public ControllerVoteUI() throws Exception {
        // ‚úÖ 1. Inicializar comunicaci√≥n Ice primero
        initIceCommunication();

        // ‚úÖ 2. Cargar estado de configuraci√≥n persistente
        loadConfigurationState();

        // ‚úÖ 3. Inicializar repositorios (pueden estar vac√≠os al inicio)
        initRepositories();

        // ‚úÖ 4. Configurar servicio de configuraci√≥n remota
        initConfigurationService();

        // ‚úÖ 5. Inicializar UI
        initUI();
    }

    /**
     * ‚úÖ NUEVO: Inicializa la comunicaci√≥n Ice por separado
     */
    private void initIceCommunication() throws Exception {
        mapper = new ObjectMapper();
        com = Util.initialize();
        rm = RMSourcePrx.checkedCast(com.stringToProxy("Sender:tcp -h localhost -p 10010"));
        dest = RMDestinationPrx.uncheckedCast(com.stringToProxy("Service:tcp -h localhost -p 10012"));
        ip = InetAddress.getLocalHost();
    }

    /**
     * ‚úÖ NUEVO: Carga el estado de configuraci√≥n persistente
     */
    private void loadConfigurationState() {
        try {
            File stateFile = new File(CONFIG_STATE_FILE);
            if (stateFile.exists()) {
                Properties props = new Properties();
                props.load(new FileInputStream(stateFile));

                isConfiguredFromServer = Boolean.parseBoolean(props.getProperty("configured.from.server", "false"));
                lastConfigurationVersion = props.getProperty("last.configuration.version", "");

                System.out.println("üìÅ Estado de configuraci√≥n cargado:");
                System.out.println("   - Configurada desde servidor: " + isConfiguredFromServer);
                System.out.println("   - √öltima versi√≥n: " + lastConfigurationVersion);
            } else {
                System.out.println("üìÅ No hay estado de configuraci√≥n previo");
            }
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error cargando estado de configuraci√≥n: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ NUEVO: Guarda el estado de configuraci√≥n
     */
    private void saveConfigurationState(String version) {
        try {
            File stateFile = new File(CONFIG_STATE_FILE);
            stateFile.getParentFile().mkdirs();

            Properties props = new Properties();
            props.setProperty("configured.from.server", "true");
            props.setProperty("last.configuration.version", version);
            props.setProperty("last.update.timestamp", String.valueOf(System.currentTimeMillis()));

            props.store(new FileOutputStream(stateFile), "Configuration State - Auto Generated");

            isConfiguredFromServer = true;
            lastConfigurationVersion = version;

            System.out.println("üíæ Estado de configuraci√≥n guardado: " + version);

        } catch (IOException e) {
            System.err.println("‚ùå Error guardando estado de configuraci√≥n: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ MEJORADO: Inicializa repositorios con manejo robusto de errores
     */
    private void initRepositories() {
        try {
            // ‚úÖ Inicializar siempre el repositorio de votos
            voteRepo = new VoteRepository();
            System.out.println("‚úÖ Repositorio de votos inicializado");

            // ‚úÖ Intentar cargar datos de elecci√≥n y votantes
            reloadDataRepositories();

        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error inicializando repositorios: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * ‚úÖ NUEVO: Recarga SOLO los repositorios de datos (elecci√≥n y votantes)
     */
    private void reloadDataRepositories() {
        try {
            // ‚úÖ Recargar repositorio de autenticaci√≥n
            authVoter = new AutenticationVoter();
            System.out.println("üîÑ Repositorio de autenticaci√≥n recargado");

            // ‚úÖ Recargar repositorio de elecci√≥n
            electionRepo = new ElectionRepository();
            election = electionRepo.getElection();

            if (election != null && election.getCandidates() != null) {
                System.out.println("üó≥Ô∏è Elecci√≥n cargada: " + election.getCandidates().size() + " candidatos");

                // ‚úÖ NUEVO: Mostrar informaci√≥n de horarios si est√°n disponibles
                logElectionScheduleInfo();
            } else {
                System.out.println("‚ö†Ô∏è No hay datos de elecci√≥n disponibles");
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error recargando repositorios de datos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * ‚úÖ NUEVO: Registra informaci√≥n sobre los horarios de la elecci√≥n
     */
    private void logElectionScheduleInfo() {
        if (election != null) {
            String votingStatus = election.getVotingStatus();
            System.out.println("üó≥Ô∏è Estado de jornada electoral: " + votingStatus);
            System.out.println("üìã " + election.getFormattedSchedule());

            if (votingStatus.equals("NO_INICIADA")) {
                long timeUntilOpen = election.getTimeUntilOpen();
                System.out.println("‚è≥ Tiempo hasta apertura: " + formatTimeRemaining(timeUntilOpen));
            } else if (votingStatus.equals("ABIERTA")) {
                long timeUntilClose = election.getTimeUntilClose();
                System.out.println("‚è≥ Tiempo hasta cierre: " + formatTimeRemaining(timeUntilClose));
            }
        }
    }

    /**
     * ‚úÖ MEJORADO: Servicio de configuraci√≥n con puerto correcto
     */
    private void initConfigurationService() {
        try {
            System.out.println("üîß Inicializando servicio de configuraci√≥n...");

            // ‚úÖ PUERTO CORREGIDO: 10843 para mesa 6823
            configurationAdapter = com.createObjectAdapterWithEndpoints(
                    "ConfigurationReceiver",
                    "tcp -h localhost -p 10843"
            );

            // Crear implementaci√≥n del servicio
            configurationReceiver = new ConfigurationReceiverImpl(this);

            // Registrar servicio con el identity correcto
            configurationAdapter.add(
                    (ConfigurationReceiver) configurationReceiver,
                    Util.stringToIdentity("ConfigurationReceiver")
            );

            // Activar adapter
            configurationAdapter.activate();

            System.out.println("‚úÖ Servicio de configuraci√≥n activo:");
            System.out.println("   - Puerto: 10843");
            System.out.println("   - Identity: ConfigurationReceiver");
            System.out.println("   - Mesa ID: " + configurationReceiver.getMachineId());

        } catch (Exception e) {
            System.err.println("‚ùå Error inicializando servicio de configuraci√≥n: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * ‚úÖ MEJORADO: UI con mejor manejo de estados
     */
    private void initUI() {
        ui = new VotingMachineUI();

        // ‚úÖ Verificar estado inicial y mostrar informaci√≥n apropiada
        updateUIWithCurrentData();

        // =================== ACCI√ìN DE LOGIN ===================
        ui.addLoginAction(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleLogin();
            }
        });

        // =================== ACCI√ìN DE VOTAR ===================
        ui.addVoteAction(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleVote();
            }
        });

        ui.setVisible(true);
    }

    /**
     * ‚úÖ ACTUALIZADO: Maneja el proceso de login CON VALIDACI√ìN DE HORARIOS
     */
    private void handleLogin() {
        try {
            String id = ui.getVoterId();
            String password = ui.getPassword();

            // ‚úÖ Verificar que los repositorios est√©n listos
            if (authVoter == null) {
                ui.showLoginMessage("Sistema no configurado. Esperando configuraci√≥n del servidor...", true);
                return;
            }

            // ‚úÖ NUEVA VALIDACI√ìN: Verificar horarios de jornada electoral
            if (election != null) {
                String votingStatus = election.getVotingStatus();

                if (!votingStatus.equals("ABIERTA") && !votingStatus.equals("SIN_HORARIO")) {
                    if (votingStatus.equals("NO_INICIADA")) {
                        long timeUntilOpen = election.getTimeUntilOpen();
                        String timeMessage = formatTimeRemaining(timeUntilOpen);
                        ui.showLoginMessage("La jornada electoral a√∫n no ha iniciado. Inicia en: " + timeMessage, true);
                        System.out.println("‚ùå Intento de login fuera de horario - Jornada no iniciada");
                    } else if (votingStatus.equals("CERRADA")) {
                        ui.showLoginMessage("La jornada electoral ha terminado. Gracias por su participaci√≥n.", true);
                        System.out.println("‚ùå Intento de login fuera de horario - Jornada cerrada");
                    }
                    return;
                }
            }

            // Validaciones existentes
            if (!authVoter.authenticate(id, password)) {
                ui.showLoginMessage("Credenciales incorrectas.", true);
                return;
            }

            if (authVoter.hasAlreadyVoted(id)) {
                ui.showLoginMessage("Ya has ejercido tu voto. Gracias.", true);
                return;
            }

            if (election == null || election.getCandidates() == null || election.getCandidates().isEmpty()) {
                ui.showLoginMessage("No hay elecci√≥n configurada. Contacte al administrador.", true);
                return;
            }

            currentVoterId = id;
            ui.showLoginMessage("Autenticaci√≥n exitosa. Redirigiendo a votaci√≥n...", false);
            System.out.println("‚úÖ Login exitoso para votante: " + id);
            ui.showVotePanel();

        } catch (Exception ex) {
            ui.showLoginMessage("Error en autenticaci√≥n: " + ex.getMessage(), true);
            ex.printStackTrace();
        }
    }

    /**
     * ‚úÖ ACTUALIZADO: Maneja el voto CON DOBLE VALIDACI√ìN DE HORARIOS
     */
    private void handleVote() {
        try {
            String candidateId = ui.getSelectedCandidateId();
            if (candidateId == null) {
                ui.showVoteMessage("Seleccione un candidato v√°lido.", true);
                return;
            }

            // ‚úÖ DOBLE VALIDACI√ìN DE HORARIO (seguridad adicional)
            if (election != null) {
                String votingStatus = election.getVotingStatus();

                if (!votingStatus.equals("ABIERTA") && !votingStatus.equals("SIN_HORARIO")) {
                    if (votingStatus.equals("CERRADA")) {
                        ui.showVoteMessage("La jornada electoral ha terminado durante su sesi√≥n.", true);
                        System.out.println("‚ùå Intento de voto fuera de horario - Jornada cerrada durante sesi√≥n");
                        ui.resetToLoginAfterVote();
                    } else {
                        ui.showVoteMessage("La votaci√≥n no est√° disponible en este momento.", true);
                        System.out.println("‚ùå Intento de voto fuera de horario - Estado: " + votingStatus);
                        ui.resetToLoginAfterVote();
                    }
                    return;
                }
            }

            // ‚úÖ Verificaciones de seguridad existentes
            if (election == null) {
                ui.showVoteMessage("Error: No hay elecci√≥n configurada.", true);
                return;
            }

            if (authVoter == null) {
                ui.showVoteMessage("Error: Sistema de autenticaci√≥n no disponible.", true);
                return;
            }

            // ‚úÖ Enviar voto
            long timestamp = System.currentTimeMillis();
            Vote vote = new Vote(ip.getHostAddress(), candidateId, timestamp, election.getElectionId());

            rm.setServerProxy(dest);
            rm.sendMessage(vote);
            voteRepo.save(vote);
            authVoter.markAsVoted(currentVoterId);

            System.out.println("‚úÖ Voto registrado exitosamente - Votante: " + currentVoterId + ", Candidato: " + candidateId);
            ui.showVoteMessage("Gracias por votar. Su elecci√≥n ha sido registrada.", false);
            ui.resetToLoginAfterVote();

        } catch (Exception ex) {
            ui.showVoteMessage("Error al emitir el voto: " + ex.getMessage(), true);
            ex.printStackTrace();
        }
    }

    /**
     * ‚úÖ NUEVO: Formatea tiempo restante en formato legible
     */
    private String formatTimeRemaining(long milliseconds) {
        if (milliseconds <= 0) {
            return "0 minutos";
        }

        long hours = milliseconds / (1000 * 60 * 60);
        long minutes = (milliseconds % (1000 * 60 * 60)) / (1000 * 60);

        if (hours > 0) {
            return hours + " horas y " + minutes + " minutos";
        } else {
            return minutes + " minutos";
        }
    }

    /**
     * ‚úÖ ACTUALIZADO: Actualiza la UI con los datos actuales INCLUYENDO ESTADO DE VOTACI√ìN
     */
    private void updateUIWithCurrentData() {
        if (election != null && election.getCandidates() != null && !election.getCandidates().isEmpty()) {
            ui.setCandidates(election.getCandidates());
            System.out.println("üìä UI actualizada con " + election.getCandidates().size() + " candidatos");

            // ‚úÖ MOSTRAR ESTADO DE JORNADA ELECTORAL
            String votingStatus = election.getVotingStatus();
            System.out.println("üó≥Ô∏è Estado de jornada electoral: " + votingStatus);
            System.out.println("üìã " + election.getFormattedSchedule());

            if (isConfiguredFromServer) {
                System.out.println("‚úÖ Mesa configurada desde servidor (versi√≥n: " + lastConfigurationVersion + ")");
            } else {
                System.out.println("üìù Usando configuraci√≥n local por defecto");
            }
        } else {
            System.out.println("‚ö†Ô∏è No hay elecci√≥n configurada. Esperando configuraci√≥n del servidor...");
        }
    }

    /**
     * ‚úÖ MEJORADO: M√©todo llamado cuando se actualiza la configuraci√≥n
     * Ahora con persistencia y mejor manejo de errores
     */
    public void onConfigurationUpdated() {
        try {
            System.out.println("üîÑ Procesando nueva configuraci√≥n del servidor...");

            // ‚úÖ 1. Recargar repositorios de datos
            reloadDataRepositories();

            // ‚úÖ 2. Actualizar UI con nuevos datos
            if (election != null && election.getCandidates() != null && !election.getCandidates().isEmpty()) {
                ui.setCandidates(election.getCandidates());
                System.out.println("‚úÖ UI actualizada con " + election.getCandidates().size() + " candidatos");

                // ‚úÖ 3. Guardar estado de configuraci√≥n
                String version = "v" + System.currentTimeMillis();
                saveConfigurationState(version);

                // ‚úÖ 4. Mostrar mensaje de √©xito en la UI
                ui.showLoginMessage("‚úÖ Configuraci√≥n actualizada desde el servidor.", false);

                // ‚úÖ 5. Registrar informaci√≥n de horarios actualizados
                logElectionScheduleInfo();

                System.out.println("üéâ Configuraci√≥n completada exitosamente");

            } else {
                System.out.println("‚ö†Ô∏è No se pudo cargar la nueva configuraci√≥n");
                ui.showLoginMessage("‚ùå Error cargando nueva configuraci√≥n.", true);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error aplicando nueva configuraci√≥n: " + e.getMessage());
            e.printStackTrace();
            ui.showLoginMessage("‚ùå Error al aplicar nueva configuraci√≥n.", true);
        }
    }

    /**
     * ‚úÖ M√©todo para obtener el ID de la mesa
     */
    public int getMachineId() {
        return configurationReceiver != null ? configurationReceiver.getMachineId() : -1;
    }

    /**
     * ‚úÖ NUEVO: M√©todo para verificar si la votaci√≥n est√° disponible
     */
    public boolean isVotingAvailable() {
        if (election == null) {
            return false;
        }

        String status = election.getVotingStatus();
        return status.equals("ABIERTA") || status.equals("SIN_HORARIO");
    }

    /**
     * ‚úÖ NUEVO: M√©todo para obtener el estado actual de la jornada
     */
    public String getCurrentVotingStatus() {
        if (election == null) {
            return "NO_CONFIGURADA";
        }

        return election.getVotingStatus();
    }

    /**
     * ‚úÖ MEJORADO: Cleanup completo cuando se cierra la aplicaci√≥n
     */
    public void shutdown() {
        try {
            System.out.println("üõë Cerrando servicios del controller...");

            if (configurationAdapter != null) {
                configurationAdapter.deactivate();
                System.out.println("   ‚úÖ Adapter de configuraci√≥n desactivado");
            }

            if (com != null) {
                com.shutdown();
                System.out.println("   ‚úÖ Comunicador Ice cerrado");
            }

            System.out.println("üõë Servicios cerrados correctamente");

        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error cerrando servicios: " + e.getMessage());
        }
    }

    // =================== M√âTODOS DE ACCESO ===================

    public boolean isConfiguredFromServer() {
        return isConfiguredFromServer;
    }

    public String getConfigurationVersion() {
        return lastConfigurationVersion;
    }

    public void forceReloadConfiguration() {
        System.out.println("üîÑ Forzando recarga de configuraci√≥n...");
        onConfigurationUpdated();
    }

    /**
     * ‚úÖ NUEVO: Obtiene la elecci√≥n actual (para debugging/testing)
     */
    public Election getCurrentElection() {
        return election;
    }

    /**
     * ‚úÖ NUEVO: M√©todo para debugging de horarios
     */
    public void debugScheduleInfo() {
        if (election != null) {
            System.out.println("üêõ DEBUG - Informaci√≥n de horarios:");
            System.out.println("   - Estado: " + election.getVotingStatus());
            System.out.println("   - Horario: " + election.getFormattedSchedule());
            System.out.println("   - Inicio: " + new java.util.Date(election.getVotingStartTime()));
            System.out.println("   - Fin: " + new java.util.Date(election.getVotingEndTime()));
            System.out.println("   - Ahora: " + new java.util.Date());
        } else {
            System.out.println("üêõ DEBUG - No hay elecci√≥n configurada");
        }
    }
}