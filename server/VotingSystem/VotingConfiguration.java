//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `VotingSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public class VotingConfiguration implements java.lang.Cloneable,
                                            java.io.Serializable
{
    public MesaInfo mesaInfo;

    public ElectionInfo electionInfo;

    public Candidate[] candidates;

    public Citizen[] citizens;

    public String packageVersion;

    public long generationTimestamp;

    public VotingConfiguration()
    {
        this.mesaInfo = new MesaInfo();
        this.electionInfo = new ElectionInfo();
        this.packageVersion = "";
    }

    public VotingConfiguration(MesaInfo mesaInfo, ElectionInfo electionInfo, Candidate[] candidates, Citizen[] citizens, String packageVersion, long generationTimestamp)
    {
        this.mesaInfo = mesaInfo;
        this.electionInfo = electionInfo;
        this.candidates = candidates;
        this.citizens = citizens;
        this.packageVersion = packageVersion;
        this.generationTimestamp = generationTimestamp;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        VotingConfiguration r = null;
        if(rhs instanceof VotingConfiguration)
        {
            r = (VotingConfiguration)rhs;
        }

        if(r != null)
        {
            if(this.mesaInfo != r.mesaInfo)
            {
                if(this.mesaInfo == null || r.mesaInfo == null || !this.mesaInfo.equals(r.mesaInfo))
                {
                    return false;
                }
            }
            if(this.electionInfo != r.electionInfo)
            {
                if(this.electionInfo == null || r.electionInfo == null || !this.electionInfo.equals(r.electionInfo))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.candidates, r.candidates))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.citizens, r.citizens))
            {
                return false;
            }
            if(this.packageVersion != r.packageVersion)
            {
                if(this.packageVersion == null || r.packageVersion == null || !this.packageVersion.equals(r.packageVersion))
                {
                    return false;
                }
            }
            if(this.generationTimestamp != r.generationTimestamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::VotingSystem::VotingConfiguration");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mesaInfo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, electionInfo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, candidates);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, citizens);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, packageVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, generationTimestamp);
        return h_;
    }

    public VotingConfiguration clone()
    {
        VotingConfiguration c = null;
        try
        {
            c = (VotingConfiguration)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        MesaInfo.ice_write(ostr, this.mesaInfo);
        ElectionInfo.ice_write(ostr, this.electionInfo);
        CandidateSeqHelper.write(ostr, this.candidates);
        CitizenSeqHelper.write(ostr, this.citizens);
        ostr.writeString(this.packageVersion);
        ostr.writeLong(this.generationTimestamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.mesaInfo = MesaInfo.ice_read(istr);
        this.electionInfo = ElectionInfo.ice_read(istr);
        this.candidates = CandidateSeqHelper.read(istr);
        this.citizens = CitizenSeqHelper.read(istr);
        this.packageVersion = istr.readString();
        this.generationTimestamp = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, VotingConfiguration v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public VotingConfiguration ice_read(com.zeroc.Ice.InputStream istr)
    {
        VotingConfiguration v = new VotingConfiguration();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<VotingConfiguration> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, VotingConfiguration v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<VotingConfiguration> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(VotingConfiguration.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final VotingConfiguration _nullMarshalValue = new VotingConfiguration();

    /** @hidden */
    public static final long serialVersionUID = 118060760387776684L;
}
