package ServerUI;

import Controller.ServerControllerImpl;
import Controller.ServerControllerImpl.ElectionResult;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * üèõÔ∏è INTERFAZ GR√ÅFICA MODERNIZADA DEL SERVIDOR ELECTORAL
 *
 * ‚úÖ NUEVA: Usa ElectoralSystemController integrado
 * ‚úÖ API MODERNA: Todos los m√©todos usan ElectionResult
 * ‚úÖ MEJOR UX: Feedback visual mejorado y validaci√≥n
 * ‚úÖ FUNCIONALIDADES NUEVAS: Diagn√≥sticos, monitoreo, reportes avanzados
 * ‚úÖ RESPONSIVE: Dise√±o moderno y profesional
 */
public class ServerUI extends JFrame implements ServerUIInterface {

    private static ServerUI instance;
    private final ServerControllerImpl controller; // ‚úÖ CAMBIO: Usar controller integrado

    // =================== COMPONENTES PRINCIPALES ===================
    private final JTextArea voteLogArea;
    private final JTextArea electionInfoArea;
    private final JTextArea systemLogArea;
    private final JLabel statusLabel;
    private final JLabel connectionStatusLabel;
    private final JProgressBar operationProgressBar;

    // =================== COLORES Y ESTILOS ===================
    private static final Color PRIMARY_COLOR = new Color(33, 150, 243);
    private static final Color SUCCESS_COLOR = new Color(76, 175, 80);
    private static final Color ERROR_COLOR = new Color(244, 67, 54);
    private static final Color WARNING_COLOR = new Color(255, 152, 0);
    private static final Color BACKGROUND_COLOR = new Color(248, 249, 250);

    public ServerUI(ServerControllerImpl controller) {
        this.controller = controller;

        // =================== CONFIGURACI√ìN VENTANA PRINCIPAL ===================
        setTitle("üèõÔ∏è Servidor Electoral - Sistema Integrado v2.0");
        setSize(1000, 750);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setIconImage(createIconImage());

        // =================== INICIALIZACI√ìN DE COMPONENTES ===================
        voteLogArea = createStyledTextArea("Registro de votos en tiempo real");
        electionInfoArea = createStyledTextArea("Informaci√≥n detallada de la elecci√≥n");
        systemLogArea = createStyledTextArea("Log del sistema y diagn√≥sticos");

        statusLabel = new JLabel("üü¢ Sistema iniciado");
        statusLabel.setBorder(new EmptyBorder(8, 15, 8, 15));
        statusLabel.setFont(new Font("SansSerif", Font.BOLD, 14));

        connectionStatusLabel = new JLabel("üîå Conectado");
        connectionStatusLabel.setFont(new Font("SansSerif", Font.PLAIN, 12));
        connectionStatusLabel.setForeground(SUCCESS_COLOR);

        operationProgressBar = new JProgressBar();
        operationProgressBar.setStringPainted(true);
        operationProgressBar.setString("Listo");
        operationProgressBar.setVisible(false);

        // =================== LAYOUT PRINCIPAL ===================
        setLayout(new BorderLayout());

        // Panel superior con estado
        add(createHeaderPanel(), BorderLayout.NORTH);

        // Pesta√±as principales
        JTabbedPane mainTabs = createMainTabPane();
        add(mainTabs, BorderLayout.CENTER);

        // Panel inferior con estado
        add(createFooterPanel(), BorderLayout.SOUTH);

        // =================== INICIALIZACI√ìN AUTOM√ÅTICA ===================
        initializeSystemStatus();
    }

    // =================== CREACI√ìN DE COMPONENTES ===================

    private JTextArea createStyledTextArea(String tooltip) {
        JTextArea area = new JTextArea();
        area.setEditable(false);
        area.setFont(new Font("Consolas", Font.PLAIN, 12));
        area.setBackground(BACKGROUND_COLOR);
        area.setToolTipText(tooltip);
        area.setMargin(new Insets(10, 10, 10, 10));
        return area;
    }

    private JPanel createHeaderPanel() {
        JPanel header = new JPanel(new BorderLayout());
        header.setBackground(PRIMARY_COLOR);
        header.setBorder(new EmptyBorder(15, 20, 15, 20));

        JLabel titleLabel = new JLabel("üèõÔ∏è Sistema Electoral Integrado");
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 18));
        titleLabel.setForeground(Color.WHITE);

        JPanel statusPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        statusPanel.setOpaque(false);
        statusPanel.add(connectionStatusLabel);

        header.add(titleLabel, BorderLayout.WEST);
        header.add(statusPanel, BorderLayout.EAST);

        return header;
    }

    private JPanel createFooterPanel() {
        JPanel footer = new JPanel(new BorderLayout());
        footer.setBorder(new EmptyBorder(10, 15, 10, 15));
        footer.setBackground(BACKGROUND_COLOR);

        footer.add(statusLabel, BorderLayout.WEST);
        footer.add(operationProgressBar, BorderLayout.CENTER);

        return footer;
    }

    private JTabbedPane createMainTabPane() {
        JTabbedPane tabs = new JTabbedPane();
        tabs.setFont(new Font("SansSerif", Font.BOLD, 13));

        // ‚úÖ PESTA√ëAS PRINCIPALES
        tabs.addTab("üìä Dashboard", createDashboardPanel());
        tabs.addTab("üó≥Ô∏è Gesti√≥n de Elecciones", createElectionPanel());
        tabs.addTab("üë• Gesti√≥n de Candidatos", createCandidatePanel());
        tabs.addTab("üì§ Configuraci√≥n de Mesas", createConfigurationPanel());
        tabs.addTab("üìà Reportes y Consultas", createReportsPanel());
        tabs.addTab("üîß Monitoreo del Sistema", createMonitoringPanel());
        tabs.addTab("üìã Registro de Votos", createVoteLogPanel());

        return tabs;
    }

    // =================== üìä PANEL DASHBOARD ===================

    private JPanel createDashboardPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de m√©tricas principales
        JPanel metricsPanel = new JPanel(new GridLayout(2, 3, 15, 15));

        metricsPanel.add(createMetricCard("üó≥Ô∏è Estado Elecci√≥n", "Cargando...", SUCCESS_COLOR));
        metricsPanel.add(createMetricCard("üë• Total Candidatos", "Cargando...", PRIMARY_COLOR));
        metricsPanel.add(createMetricCard("üìä Votos Registrados", "Cargando...", WARNING_COLOR));
        metricsPanel.add(createMetricCard("üîå Estado BD", "Cargando...", SUCCESS_COLOR));
        metricsPanel.add(createMetricCard("üì° Conexiones", "Cargando...", PRIMARY_COLOR));
        metricsPanel.add(createMetricCard("‚ö° Rendimiento", "Cargando...", SUCCESS_COLOR));

        // Panel de acciones r√°pidas
        JPanel actionsPanel = createQuickActionsPanel();

        // Panel de informaci√≥n del sistema
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBorder(createTitledBorder("üìã Informaci√≥n del Sistema"));
        infoPanel.add(new JScrollPane(systemLogArea));

        // Layout del dashboard
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(metricsPanel, BorderLayout.CENTER);
        topPanel.add(actionsPanel, BorderLayout.SOUTH);

        panel.add(topPanel, BorderLayout.NORTH);
        panel.add(infoPanel, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createMetricCard(String title, String value, Color color) {
        JPanel card = new JPanel(new BorderLayout());
        card.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(color, 2),
                new EmptyBorder(15, 15, 15, 15)
        ));
        card.setBackground(Color.WHITE);

        JLabel titleLabel = new JLabel(title, JLabel.CENTER);
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 12));
        titleLabel.setForeground(color);

        JLabel valueLabel = new JLabel(value, JLabel.CENTER);
        valueLabel.setFont(new Font("SansSerif", Font.BOLD, 16));

        card.add(titleLabel, BorderLayout.NORTH);
        card.add(valueLabel, BorderLayout.CENTER);

        return card;
    }

    private JPanel createQuickActionsPanel() {
        JPanel panel = new JPanel(new FlowLayout());
        panel.setBorder(createTitledBorder("‚ö° Acciones R√°pidas"));

        JButton btnRefresh = createStyledButton("üîÑ Actualizar Estado", PRIMARY_COLOR);
        btnRefresh.addActionListener(e -> refreshSystemStatus());

        JButton btnDiagnostic = createStyledButton("üîç Ejecutar Diagn√≥stico", WARNING_COLOR);
        btnDiagnostic.addActionListener(e -> runSystemDiagnostic());

        JButton btnStartVoting = createStyledButton("üó≥Ô∏è Iniciar Votaci√≥n", SUCCESS_COLOR);
        btnStartVoting.addActionListener(e -> startVoting());

        JButton btnStopVoting = createStyledButton("üîí Detener Votaci√≥n", ERROR_COLOR);
        btnStopVoting.addActionListener(e -> stopVoting());

        panel.add(btnRefresh);
        panel.add(btnDiagnostic);
        panel.add(btnStartVoting);
        panel.add(btnStopVoting);

        return panel;
    }

    // =================== üó≥Ô∏è PANEL GESTI√ìN DE ELECCIONES ===================

    private JPanel createElectionPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de creaci√≥n de elecci√≥n
        JPanel creationPanel = new JPanel(new GridBagLayout());
        creationPanel.setBorder(createTitledBorder("‚ûï Crear Nueva Elecci√≥n"));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // ‚úÖ CAMBIO: Ya no necesita ID, se genera autom√°ticamente
        JTextField nameField = new JTextField(20);
        JTextField startField = new JTextField("15-06-2025 00:00", 15);
        JTextField endField = new JTextField("15-06-2025 23:59", 15);

        JButton btnCreate = createStyledButton("‚úÖ Crear Elecci√≥n", SUCCESS_COLOR);
        btnCreate.addActionListener(e -> createElection(nameField, startField, endField));

        JButton btnInfo = createStyledButton("üìã Mostrar Informaci√≥n", PRIMARY_COLOR);
        btnInfo.addActionListener(e -> showElectionInfo());

        // Layout
        gbc.gridx = 0; gbc.gridy = 0; creationPanel.add(new JLabel("üìù Nombre de la Elecci√≥n:"), gbc);
        gbc.gridx = 1; creationPanel.add(nameField, gbc);
        gbc.gridx = 0; gbc.gridy++; creationPanel.add(new JLabel("üìÖ Inicio (dd-MM-yyyy HH:mm):"), gbc);
        gbc.gridx = 1; creationPanel.add(startField, gbc);
        gbc.gridx = 0; gbc.gridy++; creationPanel.add(new JLabel("üìÖ Fin (dd-MM-yyyy HH:mm):"), gbc);
        gbc.gridx = 1; creationPanel.add(endField, gbc);

        gbc.gridx = 0; gbc.gridy++; creationPanel.add(btnCreate, gbc);
        gbc.gridx = 1; creationPanel.add(btnInfo, gbc);

        // Panel de informaci√≥n
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBorder(createTitledBorder("üìä Informaci√≥n de la Elecci√≥n"));
        infoPanel.add(new JScrollPane(electionInfoArea));

        panel.add(creationPanel, BorderLayout.NORTH);
        panel.add(infoPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üë• PANEL GESTI√ìN DE CANDIDATOS ===================

    private JPanel createCandidatePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de registro de candidatos
        JPanel registrationPanel = new JPanel(new GridBagLayout());
        registrationPanel.setBorder(createTitledBorder("‚ûï Registrar Nuevo Candidato"));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField electionIdField = new JTextField("1", 10);
        JTextField nameField = new JTextField(20);
        JTextField partyField = new JTextField(20);

        JButton btnAdd = createStyledButton("‚úÖ Registrar Candidato", SUCCESS_COLOR);
        btnAdd.addActionListener(e -> addCandidate(electionIdField, nameField, partyField));

        JButton btnLoad = createStyledButton("üìÑ Cargar desde CSV", WARNING_COLOR);
        btnLoad.addActionListener(e -> loadCandidatesFromCSV(electionIdField));

        JButton btnList = createStyledButton("üìã Listar Candidatos", PRIMARY_COLOR);
        btnList.addActionListener(e -> listCandidates(electionIdField));

        // Layout
        gbc.gridx = 0; gbc.gridy = 0; registrationPanel.add(new JLabel("üó≥Ô∏è ID Elecci√≥n:"), gbc);
        gbc.gridx = 1; registrationPanel.add(electionIdField, gbc);
        gbc.gridx = 0; gbc.gridy++; registrationPanel.add(new JLabel("üë§ Nombre:"), gbc);
        gbc.gridx = 1; registrationPanel.add(nameField, gbc);
        gbc.gridx = 0; gbc.gridy++; registrationPanel.add(new JLabel("üèõÔ∏è Partido:"), gbc);
        gbc.gridx = 1; registrationPanel.add(partyField, gbc);

        gbc.gridx = 0; gbc.gridy++; registrationPanel.add(btnAdd, gbc);
        gbc.gridx = 1; registrationPanel.add(btnLoad, gbc);
        gbc.gridx = 0; gbc.gridy++; gbc.gridwidth = 2; registrationPanel.add(btnList, gbc);

        // Panel de lista de candidatos
        JTextArea candidatesArea = createStyledTextArea("Lista de candidatos registrados");
        JPanel listPanel = new JPanel(new BorderLayout());
        listPanel.setBorder(createTitledBorder("üë• Candidatos Registrados"));
        listPanel.add(new JScrollPane(candidatesArea));

        panel.add(registrationPanel, BorderLayout.NORTH);
        panel.add(listPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üì§ PANEL CONFIGURACI√ìN DE MESAS ===================

    private JPanel createConfigurationPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de configuraci√≥n
        JPanel configPanel = new JPanel(new GridBagLayout());
        configPanel.setBorder(createTitledBorder("üì§ Env√≠o de Configuraciones"));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField mesaIdField = new JTextField("6823", 10);
        JTextField electionIdField = new JTextField("1", 10);
        JTextField departmentIdField = new JTextField("1", 10);

        JButton btnSendMesa = createStyledButton("üì§ Enviar a Mesa", PRIMARY_COLOR);
        btnSendMesa.addActionListener(e -> sendConfigurationToMesa(mesaIdField, electionIdField));

        JButton btnSendDepartment = createStyledButton("üèõÔ∏è Enviar a Departamento", WARNING_COLOR);
        btnSendDepartment.addActionListener(e -> sendConfigurationToDepartment(departmentIdField, electionIdField));

        JButton btnCheckStatus = createStyledButton("üîç Verificar Estado", SUCCESS_COLOR);
        btnCheckStatus.addActionListener(e -> checkMesaStatus(mesaIdField));

        // Layout
        gbc.gridx = 0; gbc.gridy = 0; configPanel.add(new JLabel("üìã ID Mesa:"), gbc);
        gbc.gridx = 1; configPanel.add(mesaIdField, gbc);
        gbc.gridx = 0; gbc.gridy++; configPanel.add(new JLabel("üó≥Ô∏è ID Elecci√≥n:"), gbc);
        gbc.gridx = 1; configPanel.add(electionIdField, gbc);
        gbc.gridx = 0; gbc.gridy++; configPanel.add(new JLabel("üèõÔ∏è ID Departamento:"), gbc);
        gbc.gridx = 1; configPanel.add(departmentIdField, gbc);

        gbc.gridx = 0; gbc.gridy++; configPanel.add(btnSendMesa, gbc);
        gbc.gridx = 1; configPanel.add(btnSendDepartment, gbc);
        gbc.gridx = 0; gbc.gridy++; gbc.gridwidth = 2; configPanel.add(btnCheckStatus, gbc);

        // Panel de resultados
        JTextArea resultsArea = createStyledTextArea("Resultados de configuraci√≥n");
        JPanel resultsPanel = new JPanel(new BorderLayout());
        resultsPanel.setBorder(createTitledBorder("üìä Resultados"));
        resultsPanel.add(new JScrollPane(resultsArea));

        panel.add(configPanel, BorderLayout.NORTH);
        panel.add(resultsPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üìà PANEL REPORTES ===================

    private JPanel createReportsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de consultas
        JPanel queryPanel = new JPanel(new GridBagLayout());
        queryPanel.setBorder(createTitledBorder("üîç Consultas y Reportes"));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField documentField = new JTextField(15);
        JTextField nameField = new JTextField(15);
        JTextField lastNameField = new JTextField(15);
        JTextField electionIdField = new JTextField("1", 10);
        JTextField departmentIdField = new JTextField("1", 10);

        // Botones de consulta
        JButton btnCitizenReport = createStyledButton("üìã Reporte Ciudadano", PRIMARY_COLOR);
        btnCitizenReport.addActionListener(e -> generateCitizenReport(documentField, electionIdField));

        JButton btnSearchCitizen = createStyledButton("üîç Buscar Ciudadanos", SUCCESS_COLOR);
        btnSearchCitizen.addActionListener(e -> searchCitizens(nameField, lastNameField));

        JButton btnElectionResults = createStyledButton("üìä Resultados Elecci√≥n", WARNING_COLOR);
        btnElectionResults.addActionListener(e -> getElectionResults(electionIdField));

        JButton btnDepartmentReport = createStyledButton("üèõÔ∏è Reporte Departamento", ERROR_COLOR);
        btnDepartmentReport.addActionListener(e -> getDepartmentReport(departmentIdField, electionIdField));

        // Layout
        gbc.gridx = 0; gbc.gridy = 0; queryPanel.add(new JLabel("üÜî Documento:"), gbc);
        gbc.gridx = 1; queryPanel.add(documentField, gbc);
        gbc.gridx = 0; gbc.gridy++; queryPanel.add(new JLabel("üë§ Nombre:"), gbc);
        gbc.gridx = 1; queryPanel.add(nameField, gbc);
        gbc.gridx = 0; gbc.gridy++; queryPanel.add(new JLabel("üë§ Apellido:"), gbc);
        gbc.gridx = 1; queryPanel.add(lastNameField, gbc);
        gbc.gridx = 0; gbc.gridy++; queryPanel.add(new JLabel("üó≥Ô∏è ID Elecci√≥n:"), gbc);
        gbc.gridx = 1; queryPanel.add(electionIdField, gbc);
        gbc.gridx = 0; gbc.gridy++; queryPanel.add(new JLabel("üèõÔ∏è ID Departamento:"), gbc);
        gbc.gridx = 1; queryPanel.add(departmentIdField, gbc);

        gbc.gridx = 0; gbc.gridy++; queryPanel.add(btnCitizenReport, gbc);
        gbc.gridx = 1; queryPanel.add(btnSearchCitizen, gbc);
        gbc.gridx = 0; gbc.gridy++; queryPanel.add(btnElectionResults, gbc);
        gbc.gridx = 1; queryPanel.add(btnDepartmentReport, gbc);

        // Panel de resultados
        JTextArea resultsArea = createStyledTextArea("Resultados de consultas y reportes");
        JPanel resultsPanel = new JPanel(new BorderLayout());
        resultsPanel.setBorder(createTitledBorder("üìä Resultados"));
        resultsPanel.add(new JScrollPane(resultsArea));

        panel.add(queryPanel, BorderLayout.NORTH);
        panel.add(resultsPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üîß PANEL MONITOREO ===================

    private JPanel createMonitoringPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de acciones de monitoreo
        JPanel actionsPanel = new JPanel(new FlowLayout());
        actionsPanel.setBorder(createTitledBorder("üîß Herramientas de Monitoreo"));

        JButton btnSystemStatus = createStyledButton("üìä Estado del Sistema", PRIMARY_COLOR);
        btnSystemStatus.addActionListener(e -> showSystemStatus());

        JButton btnDiagnostic = createStyledButton("üîç Diagn√≥stico Completo", WARNING_COLOR);
        btnDiagnostic.addActionListener(e -> runFullDiagnostic());

        JButton btnPerformance = createStyledButton("‚ö° Estad√≠sticas de Rendimiento", SUCCESS_COLOR);
        btnPerformance.addActionListener(e -> showPerformanceStats());

        JButton btnRefresh = createStyledButton("üîÑ Refrescar Todo", ERROR_COLOR);
        btnRefresh.addActionListener(e -> refreshAllData());

        actionsPanel.add(btnSystemStatus);
        actionsPanel.add(btnDiagnostic);
        actionsPanel.add(btnPerformance);
        actionsPanel.add(btnRefresh);

        // Panel de monitoreo
        JTextArea monitoringArea = createStyledTextArea("Informaci√≥n de monitoreo del sistema");
        JPanel monitoringPanel = new JPanel(new BorderLayout());
        monitoringPanel.setBorder(createTitledBorder("üìà Monitor del Sistema"));
        monitoringPanel.add(new JScrollPane(monitoringArea));

        panel.add(actionsPanel, BorderLayout.NORTH);
        panel.add(monitoringPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üìã PANEL REGISTRO DE VOTOS ===================

    private JPanel createVoteLogPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Panel de control
        JPanel controlPanel = new JPanel(new FlowLayout());
        controlPanel.setBorder(createTitledBorder("‚öôÔ∏è Control del Registro"));

        JButton btnClear = createStyledButton("üóëÔ∏è Limpiar Log", ERROR_COLOR);
        btnClear.addActionListener(e -> voteLogArea.setText(""));

        JButton btnSave = createStyledButton("üíæ Guardar Log", SUCCESS_COLOR);
        btnSave.addActionListener(e -> saveVoteLog());

        controlPanel.add(btnClear);
        controlPanel.add(btnSave);

        // Panel de log
        JPanel logPanel = new JPanel(new BorderLayout());
        logPanel.setBorder(createTitledBorder("üìã Registro de Votos Recibidos"));
        logPanel.add(new JScrollPane(voteLogArea));

        panel.add(controlPanel, BorderLayout.NORTH);
        panel.add(logPanel, BorderLayout.CENTER);

        return panel;
    }

    // =================== üé® M√âTODOS DE ESTILO ===================

    private JButton createStyledButton(String text, Color color) {
        JButton button = new JButton(text);
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("SansSerif", Font.BOLD, 12));
        button.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Efecto hover
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(color.brighter());
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(color);
            }
        });

        return button;
    }

    private TitledBorder createTitledBorder(String title) {
        TitledBorder border = BorderFactory.createTitledBorder(title);
        border.setTitleFont(new Font("SansSerif", Font.BOLD, 14));
        border.setTitleColor(PRIMARY_COLOR);
        return border;
    }

    private Image createIconImage() {
        // Crear un √≠cono simple para la aplicaci√≥n
        return Toolkit.getDefaultToolkit().createImage(new byte[0]);
    }

    // =================== üîß M√âTODOS DE ACCI√ìN ===================

    private void createElection(JTextField nameField, JTextField startField, JTextField endField) {
        showProgress("Creando elecci√≥n...");

        CompletableFuture.runAsync(() -> {
            try {
                String name = nameField.getText().trim();
                Date start = new SimpleDateFormat("dd-MM-yyyy HH:mm").parse(startField.getText().trim());
                Date end = new SimpleDateFormat("dd-MM-yyyy HH:mm").parse(endField.getText().trim());

                // ‚úÖ CAMBIO: Usar nueva API sin ID
                ElectionResult result = controller.createElection(name, start, end);

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    if (result.isSuccess()) {
                        showSuccess("‚úÖ " + result.getMessage());
                        nameField.setText("");
                        showElectionInfo();
                    } else {
                        showError("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("‚ùå Error: " + ex.getMessage());
                });
            }
        });
    }

    private void addCandidate(JTextField electionIdField, JTextField nameField, JTextField partyField) {
        showProgress("Registrando candidato...");

        CompletableFuture.runAsync(() -> {
            try {
                int electionId = Integer.parseInt(electionIdField.getText().trim());
                String name = nameField.getText().trim();
                String party = partyField.getText().trim();

                // ‚úÖ CAMBIO: Usar nueva API
                ElectionResult result = controller.addCandidate(electionId, name, party);

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    if (result.isSuccess()) {
                        showSuccess("‚úÖ " + result.getMessage());
                        nameField.setText("");
                        partyField.setText("");
                    } else {
                        showError("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("‚ùå Error: " + ex.getMessage());
                });
            }
        });
    }

    private void showElectionInfo() {
        CompletableFuture.runAsync(() -> {
            try {
                // ‚úÖ CAMBIO: Usar nueva API para elecci√≥n 1 por defecto
                ElectionResult result = controller.getElectionInfo(1);

                SwingUtilities.invokeLater(() -> {
                    if (result.isSuccess()) {
                        electionInfoArea.setText(formatElectionInfo(result));
                    } else {
                        electionInfoArea.setText("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    electionInfoArea.setText("‚ùå Error: " + ex.getMessage());
                });
            }
        });
    }

    private void startVoting() {
        showProgress("Iniciando votaci√≥n...");

        CompletableFuture.runAsync(() -> {
            try {
                // ‚úÖ CAMBIO: Usar nueva API
                ElectionResult result = controller.startVoting(1);

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    if (result.isSuccess()) {
                        showSuccess("üó≥Ô∏è Votaci√≥n iniciada exitosamente");
                        connectionStatusLabel.setText("üü¢ Votaci√≥n Activa");
                        connectionStatusLabel.setForeground(SUCCESS_COLOR);
                    } else {
                        showError("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("‚ùå Error: " + ex.getMessage());
                });
            }
        });
    }

    private void stopVoting() {
        showProgress("Deteniendo votaci√≥n...");

        CompletableFuture.runAsync(() -> {
            try {
                // ‚úÖ CAMBIO: Usar nueva API
                ElectionResult result = controller.stopVoting(1);

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    if (result.isSuccess()) {
                        showSuccess("üîí Votaci√≥n detenida exitosamente");
                        connectionStatusLabel.setText("üî¥ Votaci√≥n Cerrada");
                        connectionStatusLabel.setForeground(ERROR_COLOR);
                    } else {
                        showError("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("‚ùå Error: " + ex.getMessage());
                });
            }
        });
    }

    private void runSystemDiagnostic() {
        showProgress("Ejecutando diagn√≥stico del sistema...");

        CompletableFuture.runAsync(() -> {
            try {
                // ‚úÖ NUEVO: Usar diagn√≥stico integrado
                ElectionResult result = controller.runSystemDiagnostic();

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    systemLogArea.setText(formatDiagnosticResult(result));
                    if (result.isSuccess()) {
                        showSuccess("üîç Diagn√≥stico completado");
                    } else {
                        showError("‚ùå " + result.getMessage());
                    }
                });

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("‚ùå Error en diagn√≥stico: " + ex.getMessage());
                });
            }
        });
    }

    // =================== üîß M√âTODOS HELPER ===================

    private void initializeSystemStatus() {
        CompletableFuture.runAsync(() -> {
            try {
                ElectionResult status = controller.getSystemStatus();

                SwingUtilities.invokeLater(() -> {
                    if (status.isSuccess()) {
                        systemLogArea.append("‚úÖ Sistema inicializado correctamente\n");
                        systemLogArea.append("üìä Estado: " + status.getMessage() + "\n");
                        connectionStatusLabel.setText("üü¢ Sistema Listo");
                        connectionStatusLabel.setForeground(SUCCESS_COLOR);
                    } else {
                        systemLogArea.append("‚ö†Ô∏è Problemas durante inicializaci√≥n\n");
                        connectionStatusLabel.setText("üü° Con Problemas");
                        connectionStatusLabel.setForeground(WARNING_COLOR);
                    }
                });

            } catch (Exception e) {
                SwingUtilities.invokeLater(() -> {
                    systemLogArea.append("‚ùå Error obteniendo estado inicial: " + e.getMessage() + "\n");
                    connectionStatusLabel.setText("üî¥ Error");
                    connectionStatusLabel.setForeground(ERROR_COLOR);
                });
            }
        });
    }

    private void refreshSystemStatus() {
        showProgress("Actualizando estado del sistema...");

        CompletableFuture.runAsync(() -> {
            try {
                ElectionResult status = controller.getSystemStatus();

                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    systemLogArea.append("üîÑ [" + new Date() + "] Estado actualizado\n");
                    if (status.isSuccess()) {
                        systemLogArea.append("‚úÖ Sistema operando normalmente\n");
                        showSuccess("Sistema actualizado correctamente");
                    } else {
                        systemLogArea.append("‚ö†Ô∏è " + status.getMessage() + "\n");
                        showWarning("Sistema con problemas detectados");
                    }
                });

            } catch (Exception e) {
                SwingUtilities.invokeLater(() -> {
                    hideProgress();
                    showError("Error actualizando estado: " + e.getMessage());
                });
            }
        });
    }

    private String formatElectionInfo(ElectionResult result) {
        if (!result.isSuccess()) {
            return "‚ùå " + result.getMessage();
        }

        Map<String, Object> data = result.getData();
        StringBuilder info = new StringBuilder();

        info.append("üó≥Ô∏è ========== INFORMACI√ìN DE LA ELECCI√ìN ==========\n");
        info.append("üìä Estado: ").append(result.getMessage()).append("\n");
        info.append("üìÖ Consultado: ").append(result.getTimestamp()).append("\n\n");

        if (data.containsKey("nombre")) {
            info.append("üìù Nombre: ").append(data.get("nombre")).append("\n");
        }
        if (data.containsKey("estado")) {
            info.append("üéØ Estado: ").append(data.get("estado")).append("\n");
        }
        if (data.containsKey("candidateCount")) {
            info.append("üë• Candidatos: ").append(data.get("candidateCount")).append("\n");
        }

        info.append("================================================\n");

        return info.toString();
    }

    private String formatDiagnosticResult(ElectionResult result) {
        StringBuilder diagnostic = new StringBuilder();

        diagnostic.append("üîç ========== DIAGN√ìSTICO DEL SISTEMA ==========\n");
        diagnostic.append("üìÖ Fecha: ").append(new Date()).append("\n");
        diagnostic.append("üìä Estado: ").append(result.isSuccess() ? "‚úÖ EXITOSO" : "‚ùå CON PROBLEMAS").append("\n");
        diagnostic.append("üí¨ Mensaje: ").append(result.getMessage()).append("\n\n");

        if (result.isSuccess() && result.getData() != null) {
            Map<String, Object> data = result.getData();

            // Informaci√≥n de la base de datos
            if (data.containsKey("database")) {
                diagnostic.append("üíæ Base de Datos:\n");
                @SuppressWarnings("unchecked")
                Map<String, Object> dbInfo = (Map<String, Object>) data.get("database");
                diagnostic.append("   - Estado: ").append(dbInfo.get("healthy")).append("\n");
            }

            // Resumen del diagn√≥stico
            if (data.containsKey("summary")) {
                @SuppressWarnings("unchecked")
                Map<String, Object> summary = (Map<String, Object>) data.get("summary");
                diagnostic.append("\nüìã Resumen:\n");
                diagnostic.append("   - Problemas encontrados: ").append(summary.get("issuesFound")).append("\n");
                diagnostic.append("   - Estado general: ").append(summary.get("overallHealth")).append("\n");
            }
        }

        diagnostic.append("================================================\n");

        return diagnostic.toString();
    }

    // =================== üé® M√âTODOS DE UI ===================

    private void showProgress(String message) {
        operationProgressBar.setString(message);
        operationProgressBar.setIndeterminate(true);
        operationProgressBar.setVisible(true);
    }

    private void hideProgress() {
        operationProgressBar.setVisible(false);
        operationProgressBar.setIndeterminate(false);
        operationProgressBar.setString("Listo");
    }

    private void showSuccess(String message) {
        statusLabel.setText("üü¢ " + message);
        statusLabel.setForeground(SUCCESS_COLOR);
    }

    private void showError(String message) {
        statusLabel.setText("üî¥ " + message);
        statusLabel.setForeground(ERROR_COLOR);
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showWarning(String message) {
        statusLabel.setText("üü° " + message);
        statusLabel.setForeground(WARNING_COLOR);
    }

    // =================== üìã M√âTODOS DE INTERFAZ LEGACY ===================

    @Override
    public void showVoteInfo(String voteInfo) {
        voteLogArea.append("üó≥Ô∏è [" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] " + voteInfo + "\n");
        voteLogArea.setCaretPosition(voteLogArea.getDocument().getLength());
    }

    @Override
    public void showElectionInfo(String electionInfo) {
        electionInfoArea.setText(electionInfo);
    }

    @Override
    public void updateStatus(String status) {
        statusLabel.setText("üìä " + status);
    }

    // =================== üöÄ M√âTODOS EST√ÅTICOS ===================

    public static void launchUI(ServerControllerImpl controller) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                // Usar look and feel por defecto
            }

            instance = new ServerUI(controller);
            instance.setVisible(true);
        });
    }

    public static ServerUI getInstance() {
        return instance;
    }

    // =================== üîß M√âTODOS ADICIONALES (PLACEHOLDER) ===================

    private void loadCandidatesFromCSV(JTextField electionIdField) {
        // TODO: Implementar carga de CSV
        showWarning("Funcionalidad en desarrollo");
    }

    private void listCandidates(JTextField electionIdField) {
        // TODO: Implementar listado de candidatos
        showWarning("Funcionalidad en desarrollo");
    }

    private void sendConfigurationToMesa(JTextField mesaIdField, JTextField electionIdField) {
        // TODO: Implementar env√≠o a mesa
        showWarning("Funcionalidad en desarrollo");
    }

    private void sendConfigurationToDepartment(JTextField departmentIdField, JTextField electionIdField) {
        // TODO: Implementar env√≠o a departamento
        showWarning("Funcionalidad en desarrollo");
    }

    private void checkMesaStatus(JTextField mesaIdField) {
        // TODO: Implementar verificaci√≥n de estado
        showWarning("Funcionalidad en desarrollo");
    }

    private void generateCitizenReport(JTextField documentField, JTextField electionIdField) {
        // TODO: Implementar reporte de ciudadano
        showWarning("Funcionalidad en desarrollo");
    }

    private void searchCitizens(JTextField nameField, JTextField lastNameField) {
        // TODO: Implementar b√∫squeda de ciudadanos
        showWarning("Funcionalidad en desarrollo");
    }

    private void getElectionResults(JTextField electionIdField) {
        // TODO: Implementar resultados de elecci√≥n
        showWarning("Funcionalidad en desarrollo");
    }

    private void getDepartmentReport(JTextField departmentIdField, JTextField electionIdField) {
        // TODO: Implementar reporte de departamento
        showWarning("Funcionalidad en desarrollo");
    }

    private void showSystemStatus() {
        refreshSystemStatus();
    }

    private void runFullDiagnostic() {
        runSystemDiagnostic();
    }

    private void showPerformanceStats() {
        // TODO: Implementar estad√≠sticas de rendimiento
        showWarning("Funcionalidad en desarrollo");
    }

    private void refreshAllData() {
        refreshSystemStatus();
        showElectionInfo();
    }

    private void saveVoteLog() {
        // TODO: Implementar guardado de log
        showWarning("Funcionalidad en desarrollo");
    }
}