//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ReportsSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ReportsSystem;

public class CitizenVotingAssignment implements java.lang.Cloneable,
                                                java.io.Serializable
{
    public CitizenInfo citizen;

    public LocationInfo location;

    public ElectionInfo election;

    public long generationTimestamp;

    public CitizenVotingAssignment()
    {
        this.citizen = new CitizenInfo();
        this.location = new LocationInfo();
        this.election = new ElectionInfo();
    }

    public CitizenVotingAssignment(CitizenInfo citizen, LocationInfo location, ElectionInfo election, long generationTimestamp)
    {
        this.citizen = citizen;
        this.location = location;
        this.election = election;
        this.generationTimestamp = generationTimestamp;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CitizenVotingAssignment r = null;
        if(rhs instanceof CitizenVotingAssignment)
        {
            r = (CitizenVotingAssignment)rhs;
        }

        if(r != null)
        {
            if(this.citizen != r.citizen)
            {
                if(this.citizen == null || r.citizen == null || !this.citizen.equals(r.citizen))
                {
                    return false;
                }
            }
            if(this.location != r.location)
            {
                if(this.location == null || r.location == null || !this.location.equals(r.location))
                {
                    return false;
                }
            }
            if(this.election != r.election)
            {
                if(this.election == null || r.election == null || !this.election.equals(r.election))
                {
                    return false;
                }
            }
            if(this.generationTimestamp != r.generationTimestamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::ReportsSystem::CitizenVotingAssignment");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, citizen);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, location);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, election);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, generationTimestamp);
        return h_;
    }

    public CitizenVotingAssignment clone()
    {
        CitizenVotingAssignment c = null;
        try
        {
            c = (CitizenVotingAssignment)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        CitizenInfo.ice_write(ostr, this.citizen);
        LocationInfo.ice_write(ostr, this.location);
        ElectionInfo.ice_write(ostr, this.election);
        ostr.writeLong(this.generationTimestamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.citizen = CitizenInfo.ice_read(istr);
        this.location = LocationInfo.ice_read(istr);
        this.election = ElectionInfo.ice_read(istr);
        this.generationTimestamp = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CitizenVotingAssignment v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CitizenVotingAssignment ice_read(com.zeroc.Ice.InputStream istr)
    {
        CitizenVotingAssignment v = new CitizenVotingAssignment();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CitizenVotingAssignment> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CitizenVotingAssignment v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CitizenVotingAssignment> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CitizenVotingAssignment.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CitizenVotingAssignment _nullMarshalValue = new CitizenVotingAssignment();

    /** @hidden */
    public static final long serialVersionUID = 4257230919706307883L;
}
