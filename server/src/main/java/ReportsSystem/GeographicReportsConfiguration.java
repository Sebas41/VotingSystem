//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ReportsSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ReportsSystem;

public class GeographicReportsConfiguration extends com.zeroc.Ice.Value
{
    public GeographicReportsConfiguration()
    {
        this.stats = new GeographicStats();
        this.packageVersion = "";
    }

    public GeographicReportsConfiguration(GeographicStats stats, LocationInfo[] subLocations, CitizenVotingAssignment[] sampleAssignments, String packageVersion, long generationTimestamp)
    {
        this.stats = stats;
        this.subLocations = subLocations;
        this.sampleAssignments = sampleAssignments;
        this.packageVersion = packageVersion;
        this.generationTimestamp = generationTimestamp;
    }

    public GeographicStats stats;

    public LocationInfo[] subLocations;

    public CitizenVotingAssignment[] sampleAssignments;

    public String packageVersion;

    public long generationTimestamp;

    public GeographicReportsConfiguration clone()
    {
        return (GeographicReportsConfiguration)super.clone();
    }

    public static String ice_staticId()
    {
        return "::ReportsSystem::GeographicReportsConfiguration";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -6996499333122012211L;

    /** @hidden */
    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        GeographicStats.ice_write(ostr_, stats);
        LocationSeqHelper.write(ostr_, subLocations);
        CitizenAssignmentSeqHelper.write(ostr_, sampleAssignments);
        ostr_.writeString(packageVersion);
        ostr_.writeLong(generationTimestamp);
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        stats = GeographicStats.ice_read(istr_);
        subLocations = LocationSeqHelper.read(istr_);
        sampleAssignments = CitizenAssignmentSeqHelper.read(istr_);
        packageVersion = istr_.readString();
        generationTimestamp = istr_.readLong();
        istr_.endSlice();
    }
}
