package org.votaciones;

import java.util.ArrayList;
import java.util.List;

import Reports.VoteNotifierImpl;
import com.zeroc.Ice.*;
import ConnectionDB.ConnectionDB;
import ConnectionDB.ConnectionDBinterface;

import Reports.ReportsManagerImpl;
import ReportsSystem.ReportsService;

import VoteNotification.VoteNotifier;
import VotingMachineManager.VotingManagerImpl;
import VotingsSystem.ConfigurationService; // ‚úÖ CORREGIDO
import Controller.ServerControllerImpl;    // ‚úÖ AGREGADO

import com.zeroc.Ice.Exception;

/**
 * Servidor Electoral completo que maneja Reports, Voting y Observer
 * Patr√≥n m√°quina de caf√© con strings formateados + Patr√≥n Observer
 */
public class Server {

    // ‚úÖ AGREGADO: Declaraci√≥n de la variable est√°tica
    private static VoteNotifierImpl voteNotifier;

    public static VoteNotifierImpl getVoteNotifier() {
        return voteNotifier;
    }

    public static void main(String[] args) {
        List<String> params = new ArrayList<>();

        try (Communicator communicator = Util.initialize(args, "electoralserver.cfg", params)) {

            System.out.println("üèõÔ∏è  Iniciando Servidor Electoral...");
            System.out.println("üìä Configurando servicios Reports, Voting y Observer...");

            // =================== CONFIGURACI√ìN DE ADAPTERS ===================

            ObjectAdapter reportsAdapter = communicator.createObjectAdapter("ReportsServer");
            ObjectAdapter votingAdapter = communicator.createObjectAdapter("VotingServer");
            ObjectAdapter notifierAdapter = communicator.createObjectAdapter("VoteNotifierServer");

            // =================== INICIALIZACI√ìN DE DATABASE ===================

            System.out.println("üîå Conectando a la base de datos...");
            ConnectionDBinterface connectionDB = new ConnectionDB();

            // =================== SERVICIO DE REPORTES ===================

            System.out.println("üìà Configurando servicio de Reports...");
            ReportsManagerImpl reportsManager = new ReportsManagerImpl(connectionDB);
            reportsAdapter.add((ReportsService) reportsManager, Util.stringToIdentity("ReportsManager"));

            // =================== SERVICIO DE VOTACI√ìN ===================

            System.out.println("üó≥Ô∏è  Configurando servicio de Voting...");
            VotingManagerImpl votingManager = new VotingManagerImpl(connectionDB);
            votingAdapter.add((ConfigurationService) votingManager, Util.stringToIdentity("ConfigurationManager"));

            // =================== SERVICIO DE OBSERVER ===================

            System.out.println("üîî Configurando servicio de Observer (Notificaciones)...");
            voteNotifier = new VoteNotifierImpl();
            notifierAdapter.add((VoteNotifier) voteNotifier, Util.stringToIdentity("VoteNotifier"));

            ServerControllerImpl.setVoteNotifier(voteNotifier);
            System.out.println("üîó Controller conectado con VoteNotifier");

            // =================== ACTIVACI√ìN DE SERVICIOS ===================

            System.out.println("üöÄ Activando servicios...");
            reportsAdapter.activate();
            votingAdapter.activate();
            notifierAdapter.activate();

            // =================== INFORMACI√ìN DEL SERVIDOR ===================

            System.out.println();
            System.out.println("‚úÖ ========== SERVIDOR ELECTORAL INICIADO ==========");
            System.out.println("üìä Servicio Reports: ACTIVO");
            System.out.println("   - Identity: ReportsManager");
            System.out.println("   - Formato: Strings formateados (patr√≥n m√°quina de caf√©)");
            System.out.println();
            System.out.println("üó≥Ô∏è  Servicio Voting: ACTIVO");
            System.out.println("   - Identity: ConfigurationManager");
            System.out.println("   - Formato: Strings formateados (patr√≥n m√°quina de caf√©)");
            System.out.println();
            System.out.println("üîî Servicio Observer: ACTIVO");
            System.out.println("   - Identity: VoteNotifier");
            System.out.println("   - Funci√≥n: Notificaciones de votos en tiempo real");
            System.out.println();
            System.out.println("üîå Base de datos: CONECTADA");
            System.out.println("‚è≥ Esperando solicitudes de clientes...");
            System.out.println("====================================================");
            System.out.println();

            // =================== ESPERA Y SHUTDOWN ===================

            communicator.waitForShutdown();

            System.out.println("üõë Cerrando Servidor Electoral...");

        } catch (LocalException e) {
            System.err.println("‚ùå Error de Ice en el servidor electoral: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            System.err.println("‚ùå Error general en el servidor electoral: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
}