package org.votaciones;

import java.util.ArrayList;
import java.util.List;
import ServerUI.ServerUI;

import Reports.VoteNotifierImpl;
import com.zeroc.Ice.*;
import ConnectionDB.ConnectionDB;
import ConnectionDB.ConnectionDBinterface;

import Reports.ReportsManagerImpl;
import ReportsSystem.ReportsService;

import VoteNotification.VoteNotifier;
import VotingMachineManager.VotingManagerImpl;
import VotingsSystem.ConfigurationService;

// ‚úÖ CAMBIO PRINCIPAL: Usar el nuevo controller integrado
import Controller.ServerControllerImpl; // Tu ElectoralSystemController renombrado
import Controller.ServerControllerImpl.ElectionResult;

import VotingReciever.VotingReceiverImp;
import com.zeroc.Ice.Exception;
import reliableMessage.RMDestination;
import configuration.ConfigurationSender;
import Elections.models.ELECTION_STATUS;

/**
 * üèõÔ∏è SERVIDOR ELECTORAL MODERNIZADO
 *
 * ‚úÖ NUEVO: Usa ElectoralSystemController integrado
 * ‚úÖ API SIMPLIFICADA: Todos los m√©todos devuelven ElectionResult
 * ‚úÖ MENOS C√ìDIGO: Elimina duplicaci√≥n y complejidad
 * ‚úÖ MEJOR ESTRUCTURA: Separaci√≥n clara de responsabilidades
 *
 * Servidor completo que maneja Reports, Voting, Observer, VotingReceiver y ConfigurationSender
 * usando el nuevo controller integrado para una API limpia y consistente.
 */
public class Server {

    // =================== COMPONENTES PRINCIPALES ===================
    private static ServerControllerImpl electoralController; // Tu ElectoralSystemController
    private static ConfigurationSender configurationSender;

    // Componentes para compatibilidad Ice
    private static ReportsManagerImpl reportsManager;
    private static VotingManagerImpl votingManager;
    private static VoteNotifierImpl voteNotifier;

    // =================== CONSTANTES ===================
    private static final int MESA_6823_ID = 6823;
    private static final int MESA_6823_PORT = 10843; // 10020 + (6823 % 1000)

    // =================== GETTERS PARA COMPATIBILIDAD ===================

    public static ServerControllerImpl getElectoralController() {
        return electoralController;
    }

    public static ConfigurationSender getConfigurationSender() {
        return configurationSender;
    }

    public static VoteNotifierImpl getVoteNotifier() {
        return voteNotifier;
    }

    // =================== M√âTODO PRINCIPAL ===================

    public static void main(String[] args) {
        List<String> params = new ArrayList<>();

        try (Communicator communicator = Util.initialize(args, "electoralserver.cfg", params)) {

            System.out.println("üèõÔ∏è  ========== SERVIDOR ELECTORAL MODERNIZADO ==========");
            System.out.println("‚úÖ Iniciando servidor con ElectoralSystemController integrado...");

            // =================== INICIALIZACI√ìN DEL CONTROLLER PRINCIPAL ===================

            System.out.println("üéÆ Inicializando Controller Electoral Integrado...");
            electoralController = new ServerControllerImpl(); // Tu ElectoralSystemController
            System.out.println("‚úÖ ElectoralSystemController inicializado exitosamente");

            // Mostrar estado inicial del sistema
            showSystemInitializationStatus();

            // =================== CONFIGURACI√ìN DE ADAPTERS ICE ===================

            System.out.println("\nüì° Configurando servicios Ice...");

            ObjectAdapter reportsAdapter = communicator.createObjectAdapter("ReportsServer");
            ObjectAdapter votingAdapter = communicator.createObjectAdapter("VotingServer");
            ObjectAdapter notifierAdapter = communicator.createObjectAdapter("VoteNotifierServer");
            ObjectAdapter votingReceiverAdapter = communicator.createObjectAdapterWithEndpoints(
                    "VotingReceiverServer", "tcp -h localhost -p 10012"
            );

            // =================== SERVICIO DE REPORTES ===================

            System.out.println("üìà Configurando servicio de Reports...");
            ConnectionDBinterface connectionDB = new ConnectionDB();
            reportsManager = new ReportsManagerImpl(connectionDB);
            reportsAdapter.add((ReportsService) reportsManager, Util.stringToIdentity("ReportsManager"));

            // =================== SERVICIO DE VOTACI√ìN ===================

            System.out.println("üó≥Ô∏è  Configurando servicio de Voting...");
            votingManager = new VotingManagerImpl(connectionDB);
            votingAdapter.add((ConfigurationService) votingManager, Util.stringToIdentity("ConfigurationManager"));

            // =================== CONFIGURATION SENDER ===================

            System.out.println("üì§ Configurando servicio de env√≠o de configuraciones...");
            configurationSender = new ConfigurationSender(votingManager, communicator);

            // ‚úÖ CONECTAR CON EL CONTROLLER INTEGRADO
            electoralController.setConfigurationSender(configurationSender);
            System.out.println("üîó ConfigurationSender conectado con ElectoralController");

            // =================== SERVICIO DE OBSERVER ===================

            System.out.println("üîî Configurando servicio de Observer...");
            voteNotifier = new VoteNotifierImpl();
            notifierAdapter.add((VoteNotifier) voteNotifier, Util.stringToIdentity("VoteNotifier"));

            // ‚úÖ CONECTAR CON EL CONTROLLER INTEGRADO
            electoralController.setVoteNotifier(voteNotifier);
            System.out.println("üîó VoteNotifier conectado con ElectoralController");

            // =================== SERVICIO DE VOTING RECEIVER ===================

            System.out.println("üì• Configurando servicio de VotingReceiver...");
            VotingReceiverImp votingReceiver = new VotingReceiverImp(electoralController);
            votingReceiverAdapter.add((RMDestination) votingReceiver, Util.stringToIdentity("Service"));

            // =================== ACTIVACI√ìN DE SERVICIOS ===================

            System.out.println("üöÄ Activando servicios Ice...");
            reportsAdapter.activate();
            votingAdapter.activate();
            notifierAdapter.activate();
            votingReceiverAdapter.activate();

            // =================== LANZAR INTERFAZ GR√ÅFICA ===================
            System.out.println("üñ•Ô∏è Iniciando Interfaz Gr√°fica del Servidor...");

            // Lanzar la UI en el hilo de eventos de Swing
            ServerUI.launchUI(electoralController);

            System.out.println("‚úÖ Interfaz Gr√°fica iniciada exitosamente");

            // =================== INFORMACI√ìN DEL SERVIDOR ===================

            System.out.println("\n‚úÖ ========== SERVIDOR ELECTORAL ACTIVO ==========");
            System.out.println("üéÆ Controller: ElectoralSystemController (API Integrada)");
            System.out.println("üìä Servicio Reports: ACTIVO (puerto 9001)");
            System.out.println("üó≥Ô∏è  Servicio Voting: ACTIVO (puerto 9003)");
            System.out.println("üîî Servicio Observer: ACTIVO (puerto 9002)");
            System.out.println("üì• Servicio VotingReceiver: ACTIVO (puerto 10012)");
            System.out.println("üì§ ConfigurationSender: ACTIVO");
            System.out.println("üîå Base de datos: CONECTADA con pool optimizado");

            // =================== M√âTODOS DISPONIBLES ===================

            System.out.println("\nüéÆ ========== M√âTODOS DE CONTROL DISPONIBLES ==========");
            System.out.println("üìã GESTI√ìN DE ELECCIONES:");
            System.out.println("   ‚Ä¢ createElection(name, startDate, endDate)");
            System.out.println("   ‚Ä¢ startVoting(electionId) / stopVoting(electionId)");
            System.out.println("   ‚Ä¢ getElectionInfo(electionId)");

            System.out.println("\nüë• GESTI√ìN DE CANDIDATOS:");
            System.out.println("   ‚Ä¢ addCandidate(electionId, name, party)");
            System.out.println("   ‚Ä¢ loadCandidatesFromCSV(electionId, filePath)");

            System.out.println("\nüì§ CONFIGURACI√ìN DE MESAS:");
            System.out.println("   ‚Ä¢ sendConfigurationToMesa(mesaId, electionId)");
            System.out.println("   ‚Ä¢ sendConfigurationToDepartment(deptId, electionId)");

            System.out.println("\nüìä REPORTES Y CONSULTAS:");
            System.out.println("   ‚Ä¢ getCitizenReport(documento, electionId)");
            System.out.println("   ‚Ä¢ getElectionResults(electionId)");
            System.out.println("   ‚Ä¢ searchCitizens(nombre, apellido, limit)");

            System.out.println("\nüîß MONITOREO Y DIAGN√ìSTICO:");
            System.out.println("   ‚Ä¢ getSystemStatus() - Estado completo del sistema");
            System.out.println("   ‚Ä¢ runSystemDiagnostic() - Diagn√≥stico detallado");
            System.out.println("   ‚Ä¢ getPerformanceStatistics() - M√©tricas de rendimiento");

            System.out.println("\nüß™ M√âTODOS DE PRUEBA (Mesa " + MESA_6823_ID + "):");
            System.out.println("   ‚Ä¢ testStartElectionMesa6823()");
            System.out.println("   ‚Ä¢ testCloseElectionMesa6823()");
            System.out.println("   ‚Ä¢ testConnectivityMesa6823()");
            System.out.println("==================================================");

            // =================== ESTADO INICIAL DEL SISTEMA ===================

            System.out.println("\nüìä ========== ESTADO INICIAL DEL SISTEMA ==========");
            ElectionResult systemStatus = electoralController.getSystemStatus();
            if (systemStatus.isSuccess()) {
                System.out.println("‚úÖ Sistema inicializado correctamente");
                System.out.println("üìã Informaci√≥n disponible en systemStatus.getData()");
            } else {
                System.out.println("‚ö†Ô∏è Advertencias en inicializaci√≥n: " + systemStatus.getMessage());
            }

            // =================== PRUEBAS AUTOM√ÅTICAS ===================

            System.out.println("\nüß™ Iniciando pruebas autom√°ticas en 10 segundos...");
            System.out.println("   üì± Para pruebas completas, ejecuta el cliente: java -jar client/build/libs/client.jar");

            // Lanzar pruebas en hilo separado
            new Thread(() -> {
                try {
                    Thread.sleep(10000); // Esperar 10 segundos
                    runAutomaticTests();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }).start();

            System.out.println("\n‚è≥ Servidor listo - Esperando solicitudes de clientes...");

            // =================== ESPERA Y SHUTDOWN ===================

            communicator.waitForShutdown();
            System.out.println("üõë Cerrando Servidor Electoral...");

            // Cleanup del controller
            electoralController.shutdown();

        } catch (LocalException e) {
            System.err.println("‚ùå Error de Ice: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            System.err.println("‚ùå Error general: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    // =================== M√âTODOS DE CONTROL SIMPLIFICADOS ===================

    /**
     * ‚úÖ NUEVO: Crea una elecci√≥n usando la API integrada
     */
    public static ElectionResult createElection(String name, java.util.Date startDate, java.util.Date endDate) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.createElection(name, startDate, endDate);
    }

    /**
     * ‚úÖ NUEVO: Agrega un candidato usando la API integrada
     */
    public static ElectionResult addCandidate(int electionId, String name, String party) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.addCandidate(electionId, name, party);
    }

    /**
     * ‚úÖ NUEVO: Inicia votaci√≥n usando la API integrada
     */
    public static ElectionResult startVoting(int electionId) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.startVoting(electionId);
    }

    /**
     * ‚úÖ NUEVO: Detiene votaci√≥n usando la API integrada
     */
    public static ElectionResult stopVoting(int electionId) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.stopVoting(electionId);
    }

    /**
     * ‚úÖ NUEVO: Obtiene estado del sistema usando la API integrada
     */
    public static ElectionResult getSystemStatus() {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.getSystemStatus();
    }

    /**
     * ‚úÖ NUEVO: Ejecuta diagn√≥stico del sistema usando la API integrada
     */
    public static ElectionResult runSystemDiagnostic() {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.runSystemDiagnostic();
    }

    /**
     * ‚úÖ NUEVO: Env√≠a configuraci√≥n a mesa usando la API integrada
     */
    public static ElectionResult sendConfigurationToMesa(int mesaId, int electionId) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.sendConfigurationToMesa(mesaId, electionId);
    }

    /**
     * ‚úÖ NUEVO: Obtiene reporte de ciudadano usando la API integrada
     */
    public static ElectionResult getCitizenReport(String documento, int electionId) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.getCitizenReport(documento, electionId);
    }

    /**
     * ‚úÖ NUEVO: Obtiene resultados de elecci√≥n usando la API integrada
     */
    public static ElectionResult getElectionResults(int electionId) {
        if (electoralController == null) {
            return ServerControllerImpl.ElectionResult.error("Controller no inicializado");
        }
        return electoralController.getElectionResults(electionId);
    }

    // =================== M√âTODOS DE PRUEBA ESPEC√çFICOS ===================

    /**
     * ‚úÖ SIMPLIFICADO: Prueba de conectividad con mesa 6823
     */
    public static boolean testConnectivityMesa6823() {
        System.out.println("üîç Probando conectividad con mesa " + MESA_6823_ID + "...");

        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no disponible");
            return false;
        }

        try {
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + MESA_6823_PORT;
            ObjectPrx base = configurationSender.communicator.stringToProxy(endpoint);
            ConfigurationSystem.ConfigurationReceiverPrx receiver =
                    ConfigurationSystem.ConfigurationReceiverPrx.checkedCast(base);

            if (receiver != null && receiver.isReady(MESA_6823_ID)) {
                System.out.println("‚úÖ Mesa " + MESA_6823_ID + " conectada y lista");
                return true;
            } else {
                System.out.println("‚ùå Mesa " + MESA_6823_ID + " no disponible");
                return false;
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error conectando: " + e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ SIMPLIFICADO: Inicia elecci√≥n en mesa 6823
     */
    public static boolean testStartElectionMesa6823() {
        System.out.println("üó≥Ô∏è Iniciando elecci√≥n en mesa " + MESA_6823_ID + "...");
        return sendElectionStatusToMesa6823("DURING");
    }

    /**
     * ‚úÖ SIMPLIFICADO: Cierra elecci√≥n en mesa 6823
     */
    public static boolean testCloseElectionMesa6823() {
        System.out.println("üîí Cerrando elecci√≥n en mesa " + MESA_6823_ID + "...");
        return sendElectionStatusToMesa6823("CLOSED");
    }

    /**
     * ‚úÖ SIMPLIFICADO: Resetea elecci√≥n en mesa 6823
     */
    public static boolean testResetElectionMesa6823() {
        System.out.println("‚è™ Reseteando elecci√≥n en mesa " + MESA_6823_ID + "...");
        return sendElectionStatusToMesa6823("PRE");
    }

    // =================== M√âTODOS HELPER PRIVADOS ===================

    private static void showSystemInitializationStatus() {
        System.out.println("\nüìä Estado de inicializaci√≥n:");

        try {
            ElectionResult status = electoralController.getSystemStatus();
            if (status.isSuccess()) {
                System.out.println("‚úÖ Base de datos: CONECTADA");
                System.out.println("‚úÖ Pool de conexiones: ACTIVO");
                System.out.println("‚úÖ Elecci√≥n de prueba: CONFIGURADA");
                System.out.println("‚úÖ Candidatos de prueba: CARGADOS");
            } else {
                System.out.println("‚ö†Ô∏è Advertencias durante inicializaci√≥n");
            }
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è No se pudo obtener estado inicial: " + e.getMessage());
        }
    }

    private static void runAutomaticTests() {
        System.out.println("\nüß™ ========== EJECUTANDO PRUEBAS AUTOM√ÅTICAS ==========");

        try {
            // 1. Prueba de conectividad
            System.out.println("\n1Ô∏è‚É£ Prueba de conectividad con mesa " + MESA_6823_ID + ":");
            boolean connectivity = testConnectivityMesa6823();
            System.out.println("   Resultado: " + (connectivity ? "‚úÖ CONECTADA" : "‚ùå NO CONECTADA"));

            if (!connectivity) {
                System.out.println("   üí° Para pruebas completas, ejecuta el cliente en otra terminal");
                System.out.println("   üì± java -jar client/build/libs/client.jar");
            }

            // 2. Prueba de diagn√≥stico del sistema
            System.out.println("\n2Ô∏è‚É£ Diagn√≥stico del sistema:");
            ElectionResult diagnostic = electoralController.runSystemDiagnostic();
            System.out.println("   Estado: " + (diagnostic.isSuccess() ? "‚úÖ SALUDABLE" : "‚ö†Ô∏è CON PROBLEMAS"));
            if (!diagnostic.isSuccess()) {
                System.out.println("   Mensaje: " + diagnostic.getMessage());
            }

            // 3. Prueba de estado del sistema
            System.out.println("\n3Ô∏è‚É£ Estado del sistema:");
            ElectionResult systemStatus = electoralController.getSystemStatus();
            if (systemStatus.isSuccess()) {
                System.out.println("   ‚úÖ Sistema operativo y listo");
                System.out.println("   üìä M√©tricas disponibles en systemStatus.getData()");
            }

            // 4. Pruebas de cambio de estado (solo si cliente conectado)
            if (connectivity) {
                System.out.println("\n4Ô∏è‚É£ Pruebas de cambio de estado en mesa " + MESA_6823_ID + ":");

                // Test DURING
                boolean startResult = testStartElectionMesa6823();
                System.out.println("   Iniciar elecci√≥n: " + (startResult ? "‚úÖ √âXITO" : "‚ùå ERROR"));
                Thread.sleep(3000);

                // Test CLOSED
                boolean stopResult = testCloseElectionMesa6823();
                System.out.println("   Cerrar elecci√≥n: " + (stopResult ? "‚úÖ √âXITO" : "‚ùå ERROR"));
                Thread.sleep(3000);

                // Test PRE
                boolean resetResult = testResetElectionMesa6823();
                System.out.println("   Reset elecci√≥n: " + (resetResult ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                // Resumen
                int successCount = (startResult ? 1 : 0) + (stopResult ? 1 : 0) + (resetResult ? 1 : 0);
                System.out.println("\n   üìä Resumen: " + successCount + "/3 pruebas exitosas");

                if (successCount == 3) {
                    System.out.println("   üéâ ¬°PERFECTO! Comunicaci√≥n servidor-cliente funcionando");
                } else if (successCount > 0) {
                    System.out.println("   ‚ö†Ô∏è Funcionamiento parcial - revisar logs");
                } else {
                    System.out.println("   ‚ùå Comunicaci√≥n fallida - verificar cliente");
                }
            }

            System.out.println("\n‚úÖ ========== PRUEBAS AUTOM√ÅTICAS COMPLETADAS ==========");
            System.out.println("üí° Para m√°s pruebas, usa los m√©todos est√°ticos del Server");
            System.out.println("üéÆ Ejemplo: Server.getSystemStatus()");

        } catch (Exception e) {
            System.err.println("‚ùå Error en pruebas autom√°ticas: " + e.getMessage());
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static boolean sendElectionStatusToMesa6823(String newStatus) {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no disponible");
            return false;
        }

        try {
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + MESA_6823_PORT;
            ObjectPrx base = configurationSender.communicator.stringToProxy(endpoint);
            ConfigurationSystem.ConfigurationReceiverPrx receiver =
                    ConfigurationSystem.ConfigurationReceiverPrx.checkedCast(base);

            if (receiver != null && receiver.isReady(MESA_6823_ID)) {
                return receiver.updateElectionStatus(1, newStatus); // Elecci√≥n ID 1
            }
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå Error enviando estado: " + e.getMessage());
            return false;
        }
    }

    // =================== M√âTODOS DE COMPATIBILIDAD ===================

    /**
     * ‚úÖ COMPATIBILIDAD: Para c√≥digo legacy que use estos m√©todos
     */
    public static boolean startElectionInAllMachines() {
        ElectionResult result = startVoting(1); // Elecci√≥n por defecto
        System.out.println("üó≥Ô∏è " + result.getMessage());
        return result.isSuccess();
    }

    public static boolean closeElectionInAllMachines() {
        ElectionResult result = stopVoting(1); // Elecci√≥n por defecto
        System.out.println("üîí " + result.getMessage());
        return result.isSuccess();
    }

    public static boolean resetElectionInAllMachines() {
        ElectionResult result = electoralController.resetVoting(1); // Elecci√≥n por defecto
        System.out.println("‚è™ " + result.getMessage());
        return result.isSuccess();
    }

    /**
     * ‚úÖ NUEVO: Muestra informaci√≥n completa del sistema
     */
    public static void showSystemInfo() {
        System.out.println("\nüìä ========== INFORMACI√ìN DEL SISTEMA ==========");

        ElectionResult status = getSystemStatus();
        if (status.isSuccess()) {
            System.out.println("‚úÖ ElectoralSystemController: ACTIVO");
            System.out.println("‚úÖ API Integrada: DISPONIBLE");
            System.out.println("‚úÖ Todos los subsistemas: OPERATIVOS");

            System.out.println("\nüéØ Mesa de prueba: " + MESA_6823_ID + " (Puerto " + MESA_6823_PORT + ")");
            System.out.println("üìä M√©tricas del sistema disponibles");
            System.out.println("üîß Diagn√≥sticos autom√°ticos activos");
        } else {
            System.out.println("‚ùå Sistema con problemas: " + status.getMessage());
        }

        System.out.println("\nüí° Usa Server.getSystemStatus() para detalles completos");
        System.out.println("üß™ Usa Server.runSystemDiagnostic() para diagn√≥stico detallado");
        System.out.println("================================================");
    }
}