package org.votaciones;

import java.util.ArrayList;
import java.util.List;

import Reports.VoteNotifierImpl;
import com.zeroc.Ice.*;
import ConnectionDB.ConnectionDB;
import ConnectionDB.ConnectionDBinterface;

import Reports.ReportsManagerImpl;
import ReportsSystem.ReportsService;

import VoteNotification.VoteNotifier;
import VotingMachineManager.VotingManagerImpl;
import VotingsSystem.ConfigurationService;
import Controller.ServerControllerImpl;
import Controller.ServerControllerInterface;

import VotingReciever.VotingReceiverImp;
import reliableMessage.RMDestination;

// ‚úÖ IMPORTAR NUESTRO ConfigurationSender
import configuration.ConfigurationSender;

// ‚úÖ IMPORTAR ENUM PARA ESTADOS
import Elections.models.ELECTION_STATUS;

import javax.swing.*;
import com.zeroc.Ice.Exception;

/**
 * Servidor Electoral completo que maneja Reports, Voting, Observer, VotingReceiver y ConfigurationSender
 * ‚úÖ ACTUALIZADO: Incluye soporte para cambio de estado de elecciones en todas las mesas
 * ‚úÖ MODIFICADO: Pruebas espec√≠ficas para mesa 6823 √∫nicamente
 * Patr√≥n m√°quina de caf√© con strings formateados + Patr√≥n Observer + Reliable Messaging + Configuraci√≥n Remota
 */
public class Server {

    // ‚úÖ VARIABLES EST√ÅTICAS EXISTENTES
    private static VoteNotifierImpl voteNotifier;
    private static ServerControllerInterface serverController;

    // ‚úÖ VARIABLE EST√ÅTICA PARA NUESTRO CONFIGURATION SENDER
    private static ConfigurationSender configurationSender;

    // ‚úÖ CONSTANTES PARA PUERTO ESPEC√çFICO DE MESA 6823
    private static final int MESA_6823_ID = 6823;
    private static final int MESA_6823_PORT = 10843; // 10020 + (6823 % 1000)

    public static VoteNotifierImpl getVoteNotifier() {
        return voteNotifier;
    }

    public static ServerControllerInterface getServerController() {
        return serverController;
    }

    // ‚úÖ GETTER PARA CONFIGURATION SENDER
    public static ConfigurationSender getConfigurationSender() {
        return configurationSender;
    }

    public static void main(String[] args) {
        List<String> params = new ArrayList<>();

        try (Communicator communicator = Util.initialize(args, "electoralserver.cfg", params)) {

            System.out.println("üèõÔ∏è  Iniciando Servidor Electoral...");
            System.out.println("üìä Configurando servicios Reports, Voting, Observer, VotingReceiver y ConfigurationSender...");

            // =================== CONFIGURACI√ìN DE ADAPTERS ===================

            ObjectAdapter reportsAdapter = communicator.createObjectAdapter("ReportsServer");
            ObjectAdapter votingAdapter = communicator.createObjectAdapter("VotingServer");
            ObjectAdapter notifierAdapter = communicator.createObjectAdapter("VoteNotifierServer");

            // ‚úÖ Adapter para VotingReceiver
            ObjectAdapter votingReceiverAdapter = communicator.createObjectAdapterWithEndpoints(
                    "VotingReceiverServer", "tcp -h localhost -p 10012"
            );

            // =================== INICIALIZACI√ìN DE DATABASE Y CONTROLLER ===================

            System.out.println("üîå Conectando a la base de datos...");
            ConnectionDBinterface connectionDB = new ConnectionDB();

            // ‚úÖ Crear el controller del servidor
            System.out.println("üéÆ Inicializando Controller del servidor...");
            serverController = new ServerControllerImpl();

            // =================== SERVICIO DE REPORTES ===================

            System.out.println("üìà Configurando servicio de Reports...");
            ReportsManagerImpl reportsManager = new ReportsManagerImpl(connectionDB);
            reportsAdapter.add((ReportsService) reportsManager, Util.stringToIdentity("ReportsManager"));

            // =================== SERVICIO DE VOTACI√ìN ===================

            System.out.println("üó≥Ô∏è  Configurando servicio de Voting...");
            VotingManagerImpl votingManager = new VotingManagerImpl(connectionDB);
            votingAdapter.add((ConfigurationService) votingManager, Util.stringToIdentity("ConfigurationManager"));

            // ‚úÖ NUESTRO CONFIGURATION SENDER
            System.out.println("üì§ Configurando servicio de env√≠o de configuraciones...");
            configurationSender = new ConfigurationSender(votingManager, communicator);

            // ‚úÖ CONECTAR EL CONFIGURATION SENDER CON EL SERVER CONTROLLER
            ((ServerControllerImpl) serverController).setConfigurationSender(configurationSender);
            System.out.println("üîó ServerController conectado con ConfigurationSender");

            // =================== SERVICIO DE OBSERVER ===================

            System.out.println("üîî Configurando servicio de Observer (Notificaciones)...");
            voteNotifier = new VoteNotifierImpl();
            notifierAdapter.add((VoteNotifier) voteNotifier, Util.stringToIdentity("VoteNotifier"));

            ServerControllerImpl.setVoteNotifier(voteNotifier);
            System.out.println("üîó Controller conectado con VoteNotifier");

            // =================== SERVICIO DE VOTING RECEIVER ===================

            System.out.println("üì• Configurando servicio de VotingReceiver...");
            VotingReceiverImp votingReceiver = new VotingReceiverImp(serverController);
            votingReceiverAdapter.add((RMDestination) votingReceiver, Util.stringToIdentity("Service"));

            // =================== ACTIVACI√ìN DE SERVICIOS ===================

            System.out.println("üöÄ Activando servicios...");
            reportsAdapter.activate();
            votingAdapter.activate();
            notifierAdapter.activate();
            votingReceiverAdapter.activate();

            // =================== INFORMACI√ìN DEL SERVIDOR ===================

            System.out.println();
            System.out.println("‚úÖ ========== SERVIDOR ELECTORAL INICIADO ==========");
            System.out.println("üìä Servicio Reports: ACTIVO");
            System.out.println("   - Identity: ReportsManager");
            System.out.println("   - Formato: Strings formateados (patr√≥n m√°quina de caf√©)");
            System.out.println();
            System.out.println("üó≥Ô∏è  Servicio Voting: ACTIVO");
            System.out.println("   - Identity: ConfigurationManager");
            System.out.println("   - Formato: Strings formateados (patr√≥n m√°quina de caf√©)");
            System.out.println();
            System.out.println("üì§ Servicio ConfigurationSender: ACTIVO");
            System.out.println("   - Funci√≥n: Env√≠o de configuraciones a mesas de votaci√≥n");
            System.out.println("   - Mesa objetivo: " + MESA_6823_ID + " (Puerto " + MESA_6823_PORT + ")");
            System.out.println("   - ‚úÖ NUEVO: Control de estado de elecciones");
            System.out.println();
            System.out.println("üîî Servicio Observer: ACTIVO");
            System.out.println("   - Identity: VoteNotifier");
            System.out.println("   - Funci√≥n: Notificaciones de votos en tiempo real");
            System.out.println();
            System.out.println("üì• Servicio VotingReceiver: ACTIVO");
            System.out.println("   - Identity: Service");
            System.out.println("   - Puerto: 10012 (tcp -h localhost -p 10012)");
            System.out.println("   - Funci√≥n: Recepci√≥n de votos mediante Reliable Messaging");
            System.out.println();
            System.out.println("üîå Base de datos: CONECTADA");
            System.out.println();
            System.out.println("‚úÖ ========== M√âTODOS DE CONTROL PARA MESA " + MESA_6823_ID + " ==========");
            System.out.println("üó≥Ô∏è  testStartElectionMesa6823() - Iniciar elecci√≥n en mesa " + MESA_6823_ID);
            System.out.println("üîí testCloseElectionMesa6823() - Cerrar elecci√≥n en mesa " + MESA_6823_ID);
            System.out.println("‚è™ testResetElectionMesa6823() - Resetear elecci√≥n en mesa " + MESA_6823_ID);
            System.out.println("üîç testConnectivityMesa6823() - Verificar conectividad con mesa " + MESA_6823_ID);
            System.out.println("üì§ sendConfigurationToMesa(mesaId, electionId) - Enviar configuraci√≥n espec√≠fica");
            System.out.println("üîç checkMesaConfigurationStatus(mesaId) - Verificar estado de mesa");
            System.out.println("üß™ testConfiguration() - Prueba de configuraci√≥n");
            System.out.println();
            System.out.println("‚è≥ Esperando solicitudes de clientes...");
            System.out.println("====================================================");
            System.out.println();

            // ‚úÖ PRUEBA INICIAL DE CONECTIVIDAD CON MESA 6823
            System.out.println("üîç Verificando conectividad inicial con mesa " + MESA_6823_ID + "...");
            new Thread(() -> {
                try {
                    Thread.sleep(5000); // Esperar 5 segundos
                    testConnectivityMesa6823();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }).start();

            // ‚úÖ NUEVA PRUEBA AUTOM√ÅTICA DE CONFIGURACI√ìN
            System.out.println("üß™ Iniciando prueba autom√°tica de configuraci√≥n...");

            // Lanzar prueba en hilo separado
            new Thread(() -> {
                configurationSender.testSendToMesa6823();
            }).start();

            // ‚úÖ EJEMPLO DE USO DE LOS NUEVOS M√âTODOS
            System.out.println("üìù Ejemplo de uso de m√©todos de control:");
            System.out.println("   Para iniciar elecci√≥n: Server.testStartElectionMesa6823()");
            System.out.println("   Para cerrar elecci√≥n: Server.testCloseElectionMesa6823()");
            System.out.println();

            // =================== ‚úÖ PRUEBA AUTOM√ÅTICA DE CAMBIO DE ESTADO SOLO MESA 6823 ===================
            System.out.println("üß™ Iniciando prueba autom√°tica de cambio de estado SOLO MESA " + MESA_6823_ID + " en 25 segundos...");
            System.out.println("   (Esto dar√° tiempo para que el cliente se conecte)");
            System.out.println("   üì± Aseg√∫rate de tener el cliente ejecut√°ndose: java -jar client/build/libs/client.jar");

            // Lanzar prueba en hilo separado para no bloquear el servidor
            new Thread(() -> {
                try {
                    // Esperar que el cliente est√© listo
                    System.out.println("‚è≥ Esperando 25 segundos para que el cliente se conecte...");
                    Thread.sleep(25000);

                    System.out.println("\nüß™ ========== INICIANDO PRUEBAS AUTOM√ÅTICAS (SOLO MESA " + MESA_6823_ID + ") ==========");

                    // =================== PRUEBA 1: INICIAR ELECCI√ìN ===================
                    System.out.println("\nüß™ PRUEBA 1: Cambiar estado a DURING (Elecci√≥n activa) en mesa " + MESA_6823_ID);
                    boolean result1 = testStartElectionMesa6823();
                    System.out.println("Resultado: " + (result1 ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                    if (result1) {
                        System.out.println("üéØ EN EL CLIENTE DEBER√çAS VER:");
                        System.out.println("   - 'Elecci√≥n activa. Votaci√≥n disponible.'");
                        System.out.println("   - Estado de votaci√≥n: ABIERTA");
                    }

                    // Esperar para ver el cambio
                    System.out.println("‚è≥ Esperando 10 segundos para observar el cambio...");
                    Thread.sleep(10000);

                    // =================== PRUEBA 2: CERRAR ELECCI√ìN ===================
                    System.out.println("\nüß™ PRUEBA 2: Cambiar estado a CLOSED (Elecci√≥n cerrada) en mesa " + MESA_6823_ID);
                    boolean result2 = testCloseElectionMesa6823();
                    System.out.println("Resultado: " + (result2 ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                    if (result2) {
                        System.out.println("üéØ EN EL CLIENTE DEBER√çAS VER:");
                        System.out.println("   - 'La elecci√≥n ha terminado. Gracias por participar.'");
                        System.out.println("   - Estado de votaci√≥n: CERRADA");
                    }

                    // Esperar para ver el cambio
                    System.out.println("‚è≥ Esperando 10 segundos para observar el cambio...");
                    Thread.sleep(10000);

                    // =================== PRUEBA 3: RESETEAR ELECCI√ìN ===================
                    System.out.println("\nüß™ PRUEBA 3: Cambiar estado a PRE (Elecci√≥n no iniciada) en mesa " + MESA_6823_ID);
                    boolean result3 = testResetElectionMesa6823();
                    System.out.println("Resultado: " + (result3 ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                    if (result3) {
                        System.out.println("üéØ EN EL CLIENTE DEBER√çAS VER:");
                        System.out.println("   - 'La elecci√≥n a√∫n no ha iniciado. Votaci√≥n no disponible.'");
                        System.out.println("   - Estado de votaci√≥n: CERRADA");
                    }

                    // =================== RESUMEN ===================
                    System.out.println("\nüìä ========== RESUMEN DE PRUEBAS AUTOM√ÅTICAS (MESA " + MESA_6823_ID + ") ==========");
                    System.out.println("Estado DURING: " + (result1 ? "‚úÖ FUNCIONA" : "‚ùå ERROR"));
                    System.out.println("Estado CLOSED: " + (result2 ? "‚úÖ FUNCIONA" : "‚ùå ERROR"));
                    System.out.println("Estado PRE: " + (result3 ? "‚úÖ FUNCIONA" : "‚ùå ERROR"));

                    int exitosos = (result1 ? 1 : 0) + (result2 ? 1 : 0) + (result3 ? 1 : 0);

                    if (exitosos == 3) {
                        System.out.println("\nüéâüéâüéâ PERFECTO! TODAS LAS PRUEBAS EXITOSAS (MESA " + MESA_6823_ID + ") üéâüéâüéâ");
                        System.out.println("‚úÖ Tu implementaci√≥n de cambio de estado funciona correctamente");
                        System.out.println("‚úÖ La comunicaci√≥n servidor-cliente est√° funcionando en puerto " + MESA_6823_PORT);
                        System.out.println("‚úÖ Los archivos JSON se est√°n actualizando correctamente");
                        System.out.println("‚úÖ El control independiente de horarios est√° funcionando");
                    } else if (exitosos >= 1) {
                        System.out.println("\n‚ö†Ô∏è Funciona parcialmente (" + exitosos + "/3)");
                        System.out.println("üí° Revisar logs del servidor y cliente para errores espec√≠ficos");
                    } else {
                        System.out.println("\n‚ùå No funcion√≥ - Posibles causas:");
                        System.out.println("   1. Cliente no est√° ejecut√°ndose");
                        System.out.println("   2. Problemas de conexi√≥n Ice en puerto " + MESA_6823_PORT);
                        System.out.println("   3. Error en la implementaci√≥n del m√©todo updateElectionStatus");
                        System.out.println("   4. ConfigurationReceiver.ice no tiene el nuevo m√©todo");
                        System.out.println("   5. Mesa " + MESA_6823_ID + " no est√° escuchando correctamente");
                    }

                    System.out.println("=========================================");

                    // Opcionalmente, continuar con pruebas peri√≥dicas
                    System.out.println("\nüí° Puedes seguir probando manualmente llamando:");
                    System.out.println("   - Server.testStartElectionMesa6823()");
                    System.out.println("   - Server.testCloseElectionMesa6823()");
                    System.out.println("   - Server.testResetElectionMesa6823()");
                    System.out.println("   - Server.testConnectivityMesa6823()");

                } catch (InterruptedException e) {
                    System.err.println("‚ùå Pruebas autom√°ticas interrumpidas: " + e.getMessage());
                    Thread.currentThread().interrupt();
                } catch (Exception e) {
                    System.err.println("‚ùå Error en pruebas autom√°ticas: " + e.getMessage());
                    e.printStackTrace();
                }
            }).start();

            // =================== ESPERA Y SHUTDOWN ===================

            communicator.waitForShutdown();

            System.out.println("üõë Cerrando Servidor Electoral...");

        } catch (LocalException e) {
            System.err.println("‚ùå Error de Ice en el servidor electoral: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            System.err.println("‚ùå Error general en el servidor electoral: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    // =================== ‚úÖ NUEVOS M√âTODOS DE CONTROL DE ESTADO ESPEC√çFICOS PARA MESA 6823 ===================

    /**
     * ‚úÖ NUEVO: Prueba de conectividad espec√≠fica con mesa 6823
     */
    public static boolean testConnectivityMesa6823() {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("üîç Probando conectividad con mesa " + MESA_6823_ID + " en puerto " + MESA_6823_PORT + "...");

        try {
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + MESA_6823_PORT;
            System.out.println("üîó Endpoint: " + endpoint);

            ObjectPrx base = configurationSender.communicator.stringToProxy(endpoint);
            ConfigurationSystem.ConfigurationReceiverPrx receiver =
                    ConfigurationSystem.ConfigurationReceiverPrx.checkedCast(base);

            if (receiver == null) {
                System.out.println("‚ùå No se pudo conectar con mesa " + MESA_6823_ID + " en puerto " + MESA_6823_PORT);
                System.out.println("üí° Verifica que el cliente est√© ejecut√°ndose");
                return false;
            }

            boolean ready = receiver.isReady(MESA_6823_ID);
            if (ready) {
                System.out.println("‚úÖ Mesa " + MESA_6823_ID + " est√° CONECTADA y LISTA en puerto " + MESA_6823_PORT);

                String status = receiver.getConfigurationStatus(MESA_6823_ID);
                System.out.println("üìä Estado de configuraci√≥n: " + status);

                return true;
            } else {
                System.out.println("‚ö†Ô∏è Mesa " + MESA_6823_ID + " est√° conectada pero NO est√° lista");
                return false;
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error conectando con mesa " + MESA_6823_ID + ": " + e.getMessage());
            System.out.println("üí° Posibles causas:");
            System.out.println("   - Cliente no est√° ejecut√°ndose");
            System.out.println("   - Puerto " + MESA_6823_PORT + " no est√° abierto");
            System.out.println("   - ConfigurationReceiver no est√° inicializado en el cliente");
            return false;
        }
    }

    /**
     * ‚úÖ NUEVO: Inicia la elecci√≥n espec√≠ficamente en mesa 6823
     */
    public static boolean testStartElectionMesa6823() {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("üó≥Ô∏è TEST: Iniciando elecci√≥n en mesa " + MESA_6823_ID + " (puerto " + MESA_6823_PORT + ")");
        return sendElectionStatusToMesa6823("DURING");
    }

    /**
     * ‚úÖ NUEVO: Cierra la elecci√≥n espec√≠ficamente en mesa 6823
     */
    public static boolean testCloseElectionMesa6823() {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("üîí TEST: Cerrando elecci√≥n en mesa " + MESA_6823_ID + " (puerto " + MESA_6823_PORT + ")");
        return sendElectionStatusToMesa6823("CLOSED");
    }

    /**
     * ‚úÖ NUEVO: Resetea la elecci√≥n espec√≠ficamente en mesa 6823
     */
    public static boolean testResetElectionMesa6823() {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("‚è™ TEST: Reseteando elecci√≥n en mesa " + MESA_6823_ID + " (puerto " + MESA_6823_PORT + ")");
        return sendElectionStatusToMesa6823("PRE");
    }

    /**
     * ‚úÖ NUEVO M√âTODO HELPER: Env√≠a estado de elecci√≥n espec√≠ficamente a mesa 6823
     */
    private static boolean sendElectionStatusToMesa6823(String newStatus) {
        try {
            int electionId = 1; // ID de elecci√≥n por defecto

            System.out.println("üì§ Enviando estado '" + newStatus + "' a mesa " + MESA_6823_ID + "...");

            String endpoint = "ConfigurationReceiver:default -h localhost -p " + MESA_6823_PORT;
            System.out.println("üîó Conectando a: " + endpoint);

            ObjectPrx base = configurationSender.communicator.stringToProxy(endpoint);
            ConfigurationSystem.ConfigurationReceiverPrx receiver =
                    ConfigurationSystem.ConfigurationReceiverPrx.checkedCast(base);

            if (receiver == null) {
                System.err.println("‚ùå No se pudo conectar con mesa " + MESA_6823_ID + " en puerto " + MESA_6823_PORT);
                return false;
            }

            // Verificar que la mesa est√© lista
            if (!receiver.isReady(MESA_6823_ID)) {
                System.err.println("‚ö†Ô∏è Mesa " + MESA_6823_ID + " no est√° lista para recibir cambios");
                return false;
            }

            // Enviar cambio de estado
            boolean success = receiver.updateElectionStatus(electionId, newStatus);

            if (success) {
                System.out.println("‚úÖ Estado '" + newStatus + "' enviado exitosamente a mesa " + MESA_6823_ID);
            } else {
                System.err.println("‚ùå Mesa " + MESA_6823_ID + " rechaz√≥ el cambio de estado a '" + newStatus + "'");
            }

            return success;

        } catch (Exception e) {
            System.err.println("‚ùå Error enviando estado a mesa " + MESA_6823_ID + ": " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    // =================== M√âTODOS ORIGINALES MANTENIDOS ===================

    /**
     * ‚úÖ ORIGINAL: Inicia la elecci√≥n en todas las mesas de votaci√≥n
     */
    public static boolean startElectionInAllMachines() {
        if (serverController == null) {
            System.err.println("‚ùå ServerController no est√° inicializado");
            return false;
        }

        System.out.println("üó≥Ô∏è Iniciando elecci√≥n en todas las mesas...");
        return ((ServerControllerImpl) serverController).startElectionInAllMachines();
    }

    /**
     * ‚úÖ ORIGINAL: Cierra la elecci√≥n en todas las mesas de votaci√≥n
     */
    public static boolean closeElectionInAllMachines() {
        if (serverController == null) {
            System.err.println("‚ùå ServerController no est√° inicializado");
            return false;
        }

        System.out.println("üîí Cerrando elecci√≥n en todas las mesas...");
        return ((ServerControllerImpl) serverController).closeElectionInAllMachines();
    }

    /**
     * ‚úÖ ORIGINAL: Resetea la elecci√≥n a estado PRE en todas las mesas
     */
    public static boolean resetElectionInAllMachines() {
        if (serverController == null) {
            System.err.println("‚ùå ServerController no est√° inicializado");
            return false;
        }

        System.out.println("‚è™ Reseteando elecci√≥n a estado PRE en todas las mesas...");
        return ((ServerControllerImpl) serverController).resetElectionInAllMachines();
    }

    /**
     * ‚úÖ ORIGINAL: Cambia el estado de la elecci√≥n en todas las mesas
     */
    public static boolean changeElectionStatusInAllMachines(ELECTION_STATUS newStatus) {
        if (serverController == null) {
            System.err.println("‚ùå ServerController no est√° inicializado");
            return false;
        }

        System.out.println("üîÑ Cambiando estado de elecci√≥n a " + newStatus + " en todas las mesas...");
        return ((ServerControllerImpl) serverController).changeElectionStatusInAllMachines(newStatus);
    }

    /**
     * ‚úÖ ORIGINAL: Cambia el estado de la elecci√≥n solo en mesas espec√≠ficas
     */
    public static boolean changeElectionStatusInSpecificMachines(ELECTION_STATUS newStatus, List<Integer> mesaIds) {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("üîÑ Cambiando estado de elecci√≥n a " + newStatus + " en " + mesaIds.size() + " mesas espec√≠ficas...");

        // Asumiendo que tenemos elecci√≥n ID 1 (puedes hacer esto configurable)
        int electionId = 1;
        return configurationSender.changeElectionStatusForSpecificMachines(electionId, newStatus.name(), mesaIds);
    }

    /**
     * ‚úÖ ORIGINAL: Diagn√≥stico de conectividad con todas las mesas
     */
    public static void diagnosticCheckAllMachines() {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return;
        }

        System.out.println("üîç Ejecutando diagn√≥stico de conectividad...");
        configurationSender.diagnosticCheckAllMachines();
    }

    // =================== M√âTODOS EXISTENTES MEJORADOS ===================

    /**
     * Env√≠a configuraci√≥n a una mesa espec√≠fica
     */
    public static boolean sendConfigurationToMesa(int mesaId, int electionId) {
        if (configurationSender == null) {
            System.err.println("‚ùå ConfigurationSender no est√° inicializado");
            return false;
        }

        System.out.println("üì§ Enviando configuraci√≥n a mesa " + mesaId + " para elecci√≥n " + electionId);
        return configurationSender.sendConfigurationToMachine(mesaId, electionId);
    }

    /**
     * Verifica el estado de configuraci√≥n de una mesa
     */
    public static String checkMesaConfigurationStatus(int mesaId) {
        if (configurationSender == null) {
            return "ERROR-ConfigurationSender no inicializado";
        }

        System.out.println("üîç Verificando estado de mesa " + mesaId);

        try {
            int port = 10020 + (mesaId % 1000);
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + port;

            com.zeroc.Ice.ObjectPrx base = configurationSender.communicator.stringToProxy(endpoint);
            ConfigurationSystem.ConfigurationReceiverPrx receiver =
                    ConfigurationSystem.ConfigurationReceiverPrx.checkedCast(base);

            if (receiver != null) {
                return receiver.getConfigurationStatus(mesaId);
            } else {
                return "ERROR-No se pudo conectar";
            }

        } catch (Exception e) {
            return "ERROR-" + e.getMessage();
        }
    }

    /**
     * ‚úÖ MEJORADO: M√©todo para pruebas manuales con m√°s opciones
     */
    public static void testConfiguration() {
        if (configurationSender != null) {
            new Thread(() -> {
                configurationSender.testSendToMesa6823();
            }).start();
        }
    }

    /**
     * ‚úÖ NUEVO: Prueba de cambio de estado espec√≠fica para mesa 6823
     */
    public static void testElectionStatusChangeMesa6823() {
        System.out.println("üß™ Iniciando prueba de cambio de estado para mesa " + MESA_6823_ID + "...");

        // Prueba secuencial de estados
        new Thread(() -> {
            try {
                System.out.println("1. Iniciando elecci√≥n en mesa " + MESA_6823_ID + "...");
                boolean started = testStartElectionMesa6823();
                System.out.println("   Resultado: " + (started ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                Thread.sleep(5000); // Esperar 5 segundos

                System.out.println("2. Cerrando elecci√≥n en mesa " + MESA_6823_ID + "...");
                boolean closed = testCloseElectionMesa6823();
                System.out.println("   Resultado: " + (closed ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                Thread.sleep(3000); // Esperar 3 segundos

                System.out.println("3. Reseteando elecci√≥n en mesa " + MESA_6823_ID + "...");
                boolean reset = testResetElectionMesa6823();
                System.out.println("   Resultado: " + (reset ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                System.out.println("üéâ Prueba de cambio de estado completada para mesa " + MESA_6823_ID);

            } catch (InterruptedException e) {
                System.err.println("‚ùå Prueba interrumpida: " + e.getMessage());
            }
        }).start();
    }

    /**
     * ‚úÖ ORIGINAL: Prueba de cambio de estado para todas las mesas
     */
    public static void testElectionStatusChange() {
        System.out.println("üß™ Iniciando prueba de cambio de estado...");

        // Prueba secuencial de estados
        new Thread(() -> {
            try {
                System.out.println("1. Iniciando elecci√≥n...");
                boolean started = startElectionInAllMachines();
                System.out.println("   Resultado: " + (started ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                Thread.sleep(5000); // Esperar 5 segundos

                System.out.println("2. Cerrando elecci√≥n...");
                boolean closed = closeElectionInAllMachines();
                System.out.println("   Resultado: " + (closed ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                Thread.sleep(3000); // Esperar 3 segundos

                System.out.println("3. Reseteando elecci√≥n...");
                boolean reset = resetElectionInAllMachines();
                System.out.println("   Resultado: " + (reset ? "‚úÖ √âXITO" : "‚ùå ERROR"));

                System.out.println("üéâ Prueba de cambio de estado completada");

            } catch (InterruptedException e) {
                System.err.println("‚ùå Prueba interrumpida: " + e.getMessage());
            }
        }).start();
    }

    /**
     * ‚úÖ MEJORADO: Informaci√≥n del sistema
     */
    public static void showSystemInfo() {
        System.out.println();
        System.out.println("üìä ========== INFORMACI√ìN DEL SISTEMA ==========");
        System.out.println("üéØ Mesa de prueba: " + MESA_6823_ID);
        System.out.println("üîå Puerto espec√≠fico: " + MESA_6823_PORT);
        System.out.println("üì° Endpoint: ConfigurationReceiver:default -h localhost -p " + MESA_6823_PORT);

        if (serverController != null) {
            System.out.println("‚úÖ ServerController: INICIALIZADO");
        } else {
            System.out.println("‚ùå ServerController: NO INICIALIZADO");
        }

        if (configurationSender != null) {
            System.out.println("‚úÖ ConfigurationSender: INICIALIZADO");
        } else {
            System.out.println("‚ùå ConfigurationSender: NO INICIALIZADO");
        }

        if (voteNotifier != null) {
            System.out.println("‚úÖ VoteNotifier: INICIALIZADO");
        } else {
            System.out.println("‚ùå VoteNotifier: NO INICIALIZADO");
        }

        System.out.println();
        System.out.println("üéÆ M√âTODOS ESPEC√çFICOS PARA MESA " + MESA_6823_ID + ":");
        System.out.println("   - testStartElectionMesa6823()");
        System.out.println("   - testCloseElectionMesa6823()");
        System.out.println("   - testResetElectionMesa6823()");
        System.out.println("   - testConnectivityMesa6823()");
        System.out.println("   - testElectionStatusChangeMesa6823()");
        System.out.println();
        System.out.println("üéÆ M√âTODOS GLOBALES (TODAS LAS MESAS):");
        System.out.println("   - startElectionInAllMachines()");
        System.out.println("   - closeElectionInAllMachines()");
        System.out.println("   - resetElectionInAllMachines()");
        System.out.println("   - diagnosticCheckAllMachines()");
        System.out.println("   - testElectionStatusChange()");
        System.out.println("   - sendConfigurationToMesa(mesaId, electionId)");
        System.out.println("   - checkMesaConfigurationStatus(mesaId)");
        System.out.println("================================================");
        System.out.println();
    }

    /**
     * ‚úÖ ORIGINAL: M√©todo de utilidad para obtener lista de mesas por defecto
     */
    public static List<Integer> getDefaultMesaList() {
        List<Integer> defaultMesas = new ArrayList<>();
        defaultMesas.add(MESA_6823_ID); // Mesa de prueba
        // Puedes agregar m√°s mesas aqu√≠ seg√∫n tu configuraci√≥n
        return defaultMesas;
    }

    /**
     * ‚úÖ NUEVO: Calcular puerto para cualquier mesa (m√©todo p√∫blico para verificaci√≥n)
     */
    public static int calculatePortForMesa(int mesaId) {
        return 10020 + (mesaId % 1000);
    }
}