package configuration;

import ConfigurationSystem.ConfigurationReceiverPrx;
import VotingMachineManager.VotingManagerImpl;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectPrx;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * Servicio para enviar configuraciones a mesas de votaci√≥n remotas
 * ‚úÖ ACTUALIZADO: Incluye soporte para cambio de estado de elecciones
 */
public class ConfigurationSender {

    private static final Logger logger = LoggerFactory.getLogger(ConfigurationSender.class);
    private final VotingManagerImpl votingManager;
    public final Communicator communicator; // ‚úÖ P√∫blico para uso en Server.java

    public ConfigurationSender(VotingManagerImpl votingManager, Communicator communicator) {
        this.votingManager = votingManager;
        this.communicator = communicator;
        logger.info("üöÄ ConfigurationSender inicializado");
    }

    /**
     * Env√≠a configuraci√≥n a una mesa espec√≠fica
     */
    public boolean sendConfigurationToMachine(int mesaId, int electionId) {
        logger.info("üì§ Enviando configuraci√≥n a mesa {} para elecci√≥n {}", mesaId, electionId);

        try {
            // 1. Generar configuraci√≥n
            String configurationData = votingManager.generateMachineConfigurationString(mesaId, electionId);

            if (configurationData.startsWith("ERROR")) {
                logger.error("‚ùå Error generando configuraci√≥n: {}", configurationData);
                return false;
            }

            logger.info("üì¶ Configuraci√≥n generada para mesa {} - {} caracteres", mesaId, configurationData.length());

            // 2. Conectar con la mesa remota
            int port = 10020 + (mesaId % 1000); // Puerto basado en mesa ID
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + port;

            logger.info("üîó Conectando a mesa {} en endpoint: {}", mesaId, endpoint);

            ObjectPrx base = communicator.stringToProxy(endpoint);
            ConfigurationReceiverPrx receiver = ConfigurationReceiverPrx.checkedCast(base);

            if (receiver == null) {
                logger.error("‚ùå No se pudo conectar con la mesa {} en puerto {}", mesaId, port);
                return false;
            }

            // 3. Verificar que la mesa est√© lista
            logger.info("üîç Verificando si mesa {} est√° lista...", mesaId);
            if (!receiver.isReady(mesaId)) {
                logger.warn("‚ö†Ô∏è Mesa {} no est√° lista para recibir configuraci√≥n", mesaId);
                return false;
            }

            // 4. Enviar configuraci√≥n
            logger.info("üì° Enviando configuraci√≥n a mesa {}...", mesaId);
            boolean success = receiver.updateConfiguration(mesaId, configurationData);

            if (success) {
                logger.info("‚úÖ Configuraci√≥n enviada exitosamente a mesa {}", mesaId);

                // Verificar estado
                String status = receiver.getConfigurationStatus(mesaId);
                logger.info("üìä Estado de configuraci√≥n mesa {}: {}", mesaId, status);

            } else {
                logger.error("‚ùå Error enviando configuraci√≥n a mesa {}", mesaId);
            }

            return success;

        } catch (Exception e) {
            logger.error("‚ùå Error enviando configuraci√≥n a mesa {}: {}", mesaId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * ‚úÖ NUEVO: Cambia el estado de una elecci√≥n en todas las mesas registradas
     */
    public boolean changeElectionStatusForAllMachines(int electionId, String newStatus) {
        logger.info("üöÄ Iniciando cambio de estado para elecci√≥n {} -> {} en TODAS las mesas", electionId, newStatus);

        try {
            // 1. Validar el estado
            if (!isValidElectionStatus(newStatus)) {
                logger.error("‚ùå Estado de elecci√≥n inv√°lido: {}", newStatus);
                return false;
            }

            // 2. Obtener todas las mesas del sistema
            List<Integer> allMesaIds = votingManager.getAllMesaIds();

            if (allMesaIds.isEmpty()) {
                logger.warn("‚ö†Ô∏è No hay mesas registradas en el sistema");
                return false;
            }

            logger.info("üìã Enviando cambio de estado a {} mesas", allMesaIds.size());

            // 3. Enviar cambio de estado a cada mesa
            int successCount = 0;
            int failureCount = 0;

            for (Integer mesaId : allMesaIds) {
                boolean success = sendElectionStatusToMachine(mesaId, electionId, newStatus);

                if (success) {
                    successCount++;
                    logger.debug("‚úÖ Mesa {} actualizada exitosamente", mesaId);
                } else {
                    failureCount++;
                    logger.warn("‚ùå Error actualizando mesa {}", mesaId);
                }

                // Peque√±a pausa entre env√≠os para evitar saturar la red
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }

            // 4. Reporte final
            logger.info("üìä Cambio de estado completado:");
            logger.info("   - Exitosas: {}/{}", successCount, allMesaIds.size());
            logger.info("   - Fallidas: {}/{}", failureCount, allMesaIds.size());
            logger.info("   - Estado: {}", newStatus);

            // Considerar exitoso si al menos 80% de las mesas fueron actualizadas
            double successRate = (double) successCount / allMesaIds.size();
            boolean overallSuccess = successRate >= 0.8;

            if (overallSuccess) {
                logger.info("üéâ Cambio de estado EXITOSO - {:.1f}% de mesas actualizadas", successRate * 100);
            } else {
                logger.error("üí• Cambio de estado PARCIALMENTE FALLIDO - solo {:.1f}% de mesas actualizadas", successRate * 100);
            }

            return overallSuccess;

        } catch (Exception e) {
            logger.error("‚ùå Error cr√≠tico cambiando estado de elecci√≥n: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * ‚úÖ M√âTODO HELPER: Env√≠a cambio de estado a una mesa espec√≠fica
     */
    private boolean sendElectionStatusToMachine(int mesaId, int electionId, String newStatus) {
        try {
            // Calcular puerto din√°mico
            int port = 10020 + (mesaId % 1000);
            String endpoint = "ConfigurationReceiver:default -h localhost -p " + port;

            logger.debug("üîó Conectando a mesa {} en puerto {} para cambio de estado", mesaId, port);

            // Conectar con la mesa
            ObjectPrx base = communicator.stringToProxy(endpoint);
            ConfigurationReceiverPrx receiver = ConfigurationReceiverPrx.checkedCast(base);

            if (receiver == null) {
                logger.warn("‚ùå No se pudo conectar con mesa {} en puerto {}", mesaId, port);
                return false;
            }

            // Verificar que la mesa est√© lista
            if (!receiver.isReady(mesaId)) {
                logger.warn("‚ö†Ô∏è Mesa {} no est√° lista para recibir cambios", mesaId);
                return false;
            }

            // ‚úÖ ENVIAR CAMBIO DE ESTADO
            boolean success = receiver.updateElectionStatus(electionId, newStatus);

            if (success) {
                logger.debug("‚úÖ Estado enviado exitosamente a mesa {}", mesaId);
            } else {
                logger.warn("‚ùå Mesa {} rechaz√≥ el cambio de estado", mesaId);
            }

            return success;

        } catch (Exception e) {
            logger.error("‚ùå Error enviando estado a mesa {}: {}", mesaId, e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ M√âTODO HELPER: Valida el estado de elecci√≥n
     */
    private boolean isValidElectionStatus(String status) {
        return status != null && (
                status.equals("PRE") ||
                        status.equals("DURING") ||
                        status.equals("CLOSED")
        );
    }

    /**
     * ‚úÖ NUEVO: Cambio de estado para un conjunto espec√≠fico de mesas
     */
    public boolean changeElectionStatusForSpecificMachines(int electionId, String newStatus, List<Integer> mesaIds) {
        logger.info("üöÄ Iniciando cambio de estado para elecci√≥n {} -> {} en {} mesas espec√≠ficas",
                electionId, newStatus, mesaIds.size());

        try {
            // 1. Validar el estado
            if (!isValidElectionStatus(newStatus)) {
                logger.error("‚ùå Estado de elecci√≥n inv√°lido: {}", newStatus);
                return false;
            }

            if (mesaIds == null || mesaIds.isEmpty()) {
                logger.warn("‚ö†Ô∏è Lista de mesas vac√≠a");
                return false;
            }

            // 2. Enviar cambio de estado a cada mesa especificada
            int successCount = 0;
            int failureCount = 0;

            for (Integer mesaId : mesaIds) {
                boolean success = sendElectionStatusToMachine(mesaId, electionId, newStatus);

                if (success) {
                    successCount++;
                    logger.debug("‚úÖ Mesa {} actualizada exitosamente", mesaId);
                } else {
                    failureCount++;
                    logger.warn("‚ùå Error actualizando mesa {}", mesaId);
                }

                // Peque√±a pausa entre env√≠os
                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }

            // 3. Reporte final
            logger.info("üìä Cambio de estado espec√≠fico completado:");
            logger.info("   - Exitosas: {}/{}", successCount, mesaIds.size());
            logger.info("   - Fallidas: {}/{}", failureCount, mesaIds.size());

            double successRate = (double) successCount / mesaIds.size();
            return successRate >= 0.8; // 80% de √©xito m√≠nimo

        } catch (Exception e) {
            logger.error("‚ùå Error cr√≠tico cambiando estado en mesas espec√≠ficas: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * ‚úÖ M√âTODOS DE CONVENIENCIA: Para estados espec√≠ficos
     */
    public boolean startElectionInAllMachines(int electionId) {
        logger.info("üó≥Ô∏è Iniciando elecci√≥n {} en todas las mesas...", electionId);
        return changeElectionStatusForAllMachines(electionId, "DURING");
    }

    public boolean closeElectionInAllMachines(int electionId) {
        logger.info("üîí Cerrando elecci√≥n {} en todas las mesas...", electionId);
        return changeElectionStatusForAllMachines(electionId, "CLOSED");
    }

    public boolean resetElectionInAllMachines(int electionId) {
        logger.info("‚è™ Reseteando elecci√≥n {} a estado PRE en todas las mesas...", electionId);
        return changeElectionStatusForAllMachines(electionId, "PRE");
    }

    /**
     * ‚úÖ M√âTODO DE PRUEBA: Para testing del cambio de estado
     */
    public void testChangeElectionStatusToAllMachines(int electionId, String newStatus) {
        logger.info("üß™ INICIANDO PRUEBA - Cambio de estado de elecci√≥n {} a {}", electionId, newStatus);

        boolean success = changeElectionStatusForAllMachines(electionId, newStatus);

        if (success) {
            logger.info("üéâ PRUEBA EXITOSA - Estado cambiado a todas las mesas");
        } else {
            logger.error("üí• PRUEBA FALLIDA - Error cambiando estado");
        }
    }

    /**
     * M√©todo de prueba para enviar configuraci√≥n a mesa 6823
     */
    public void testSendToMesa6823() {
        logger.info("üß™ INICIANDO PRUEBA - Enviando configuraci√≥n a mesa 6823");

        // Esperar un poco para que el cliente est√© listo
        try {
            logger.info("‚è≥ Esperando 8 segundos para que el cliente est√© listo...");
            Thread.sleep(8000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
        }

        boolean success = sendConfigurationToMachine(6823, 1);

        if (success) {
            logger.info("üéâ PRUEBA EXITOSA - Mesa 6823 configurada correctamente");
        } else {
            logger.error("üí• PRUEBA FALLIDA - Error configurando mesa 6823");

            // Intentar una vez m√°s
            logger.info("üîÑ Reintentando en 5 segundos...");
            try {
                Thread.sleep(5000);
                boolean retrySuccess = sendConfigurationToMachine(6823, 1);
                if (retrySuccess) {
                    logger.info("üéâ REINTENTO EXITOSO - Mesa 6823 configurada");
                } else {
                    logger.error("üí• REINTENTO FALLIDO - Mesa 6823 no se pudo configurar");
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * ‚úÖ M√âTODO DE DIAGN√ìSTICO: Verificar conectividad con todas las mesas
     */
    public void diagnosticCheckAllMachines() {
        logger.info("üîç DIAGN√ìSTICO - Verificando conectividad con todas las mesas...");

        try {
            List<Integer> allMesaIds = votingManager.getAllMesaIds();

            if (allMesaIds.isEmpty()) {
                logger.warn("‚ö†Ô∏è No hay mesas registradas para diagn√≥stico");
                return;
            }

            int connectedCount = 0;
            int disconnectedCount = 0;

            for (Integer mesaId : allMesaIds) {
                try {
                    int port = 10020 + (mesaId % 1000);
                    String endpoint = "ConfigurationReceiver:default -h localhost -p " + port;

                    ObjectPrx base = communicator.stringToProxy(endpoint);
                    ConfigurationReceiverPrx receiver = ConfigurationReceiverPrx.checkedCast(base);

                    if (receiver != null && receiver.isReady(mesaId)) {
                        connectedCount++;
                        logger.debug("‚úÖ Mesa {} - CONECTADA (puerto {})", mesaId, port);
                    } else {
                        disconnectedCount++;
                        logger.debug("‚ùå Mesa {} - DESCONECTADA (puerto {})", mesaId, port);
                    }

                } catch (Exception e) {
                    disconnectedCount++;
                    logger.debug("‚ùå Mesa {} - ERROR: {}", mesaId, e.getMessage());
                }
            }

            logger.info("üìä DIAGN√ìSTICO COMPLETADO:");
            logger.info("   - Total mesas: {}", allMesaIds.size());
            logger.info("   - Conectadas: {} ({:.1f}%)", connectedCount,
                    (double) connectedCount / allMesaIds.size() * 100);
            logger.info("   - Desconectadas: {} ({:.1f}%)", disconnectedCount,
                    (double) disconnectedCount / allMesaIds.size() * 100);

        } catch (Exception e) {
            logger.error("‚ùå Error durante diagn√≥stico: {}", e.getMessage(), e);
        }
    }
}