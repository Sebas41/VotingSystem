plugins {
    id 'java'
    id 'application'

}

group = 'com.electoral'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // Ice framework
    implementation 'com.zeroc:ice:3.7.2'

    // Database
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'com.zaxxer:HikariCP:5.1.0'

    implementation project(':reliableServer')

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    '../ReportsSystem',
                    '../VotingsSystem',
                    '../VoteNotification',
                    '../ConfigurationSystem'
            ]
        }
    }
}

application {
    mainClass = 'org.votaciones.Server'
}


task runServer(type: JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.Server'
    args = ['--Ice.Config=src/main/resources/electoralserver.cfg']
}

task runServerDebug(type: JavaExec) {
    group = 'development'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.Server'
    args = ['--Ice.Config=src/main/resources/electoralserver.cfg']
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
}

// Verificar dependencias del proyecto
task showProjectDependencies {
    group = 'verification'
    doLast {
        println "Dependencias del proyecto:"
        configurations.compileClasspath.allDependencies.withType(ProjectDependency).each {
            println "   - Proyecto: ${it.dependencyProject.name}"
            println "     Path: ${it.dependencyProject.projectDir}"
        }

        println "\nSource directories:"
        sourceSets.main.java.srcDirs.each { println "   - ${it}" }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// =================== CONFIGURACIÓN DE JAR ===================
jar {
    manifest {
        attributes(
                "Main-Class": "org.votaciones.Server",
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}

// Verificar que reliableServer esté disponible
task verifyReliableServer {
    group = 'verification'
    description = 'Verifica que el proyecto reliableServer esté disponible'
    doLast {
        try {
            def reliableServerProject = project(':reliableServer')
            println "Proyecto reliableServer encontrado: ${reliableServerProject.projectDir}"

            // Verificar que las clases model estén en reliableServer
            def modelClasses = fileTree(dir: reliableServerProject.projectDir, include: '**/model/*.java')
            println "Clases model encontradas:"
            modelClasses.each { println "   - ${it.name}" }

        } catch (Exception e) {
            println "Error: Proyecto reliableServer no encontrado"
            println "Asegúrate de que esté incluido en settings.gradle"
            throw e
        }
    }
}

// Agregar al final del archivo server/build.gradle:
task simpleTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    main = 'test.SimpleElectionTest'
    dependsOn testClasses
}
// Asegurar verificación antes de compilar
compileJava.dependsOn verifyReliableServer