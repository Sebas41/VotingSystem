plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.electoral'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // Ice framework
    implementation 'com.zeroc:ice:3.7.2'

    // Database
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'com.zaxxer:HikariCP:5.1.0'

    implementation project(':reliableServer')

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    '../ReportsSystem',
                    '../VotingsSystem',
                    '../VoteNotification',
                    '../ConfigurationSystem'
            ]
        }
    }
}

application {
    mainClass = 'org.votaciones.Server'
}

// =================== CONFIGURACIÓN DE FAT JAR ===================
shadowJar {
    archiveClassifier.set('')
    archiveVersion.set('1.0.0')
    archiveBaseName.set('server-fat')

    manifest {
        attributes(
                'Main-Class': 'org.votaciones.Server',
                'Implementation-Title': 'Electoral Server',
                'Implementation-Version': project.version
        )
    }

    // Incluir recursos
    from('src/main/resources') {
        into('/')
    }

    // Resolver conflictos de archivos duplicados
    mergeServiceFiles()

    // Excluir archivos problemáticos
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/MANIFEST.MF'

    // Incluir dependencias transitivas
    configurations = [project.configurations.runtimeClasspath]

    doLast {
        println "Fat JAR creado: ${archiveFile.get().asFile.absolutePath}"
        println "Tamaño: ${archiveFile.get().asFile.length() / (1024 * 1024)} MB"
    }
}

// Hacer que 'build' genere el fat jar por defecto
build.dependsOn shadowJar

// =================== TAREAS EXISTENTES ===================
task runServer(type: JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.Server'
    args = ['--Ice.Config=src/main/resources/electoralserver.cfg']
}

task runServerDebug(type: JavaExec) {
    group = 'development'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.votaciones.Server'
    args = ['--Ice.Config=src/main/resources/electoralserver.cfg']
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
}

// Nueva tarea para probar el fat jar
task runFatJar(type: JavaExec) {
    group = 'application'
    description = 'Ejecuta el fat jar generado'
    classpath = files("${buildDir}/libs/server-fat-1.0.0.jar")
    mainClass = 'org.votaciones.Server'
    dependsOn shadowJar
}

task showProjectDependencies {
    group = 'verification'
    doLast {
        println "Dependencias del proyecto:"
        configurations.compileClasspath.allDependencies.withType(ProjectDependency).each {
            println "   - Proyecto: ${it.dependencyProject.name}"
            println "     Path: ${it.dependencyProject.projectDir}"
        }

        println "\nSource directories:"
        sourceSets.main.java.srcDirs.each { println "   - ${it}" }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// JAR normal (sin dependencias)
jar {
    manifest {
        attributes(
                "Main-Class": "org.votaciones.Server",
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
    archiveClassifier.set('thin')
}

task verifyReliableServer {
    group = 'verification'
    description = 'Verifica que el proyecto reliableServer esté disponible'
    doLast {
        try {
            def reliableServerProject = project(':reliableServer')
            println "Proyecto reliableServer encontrado: ${reliableServerProject.projectDir}"

            def modelClasses = fileTree(dir: reliableServerProject.projectDir, include: '**/model/*.java')
            println "Clases model encontradas:"
            modelClasses.each { println "   - ${it.name}" }

        } catch (Exception e) {
            println "Error: Proyecto reliableServer no encontrado"
            println "Asegúrate de que esté incluido en settings.gradle"
            throw e
        }
    }
}

task simpleTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    main = 'test.SimpleElectionTest'
    dependsOn testClasses
}

compileJava.dependsOn verifyReliableServer