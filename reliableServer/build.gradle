plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.zeroc.gradle.ice-builder.slice' version '1.5.0'
}

group = 'com.electoral'
version = '1.0.0'

slice {
    java {
        files = [file("ReliableMessage.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation 'com.esotericsoftware:kryo:5.5.0'

    // Logging para debugging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = project.name.capitalize()
}

// =================== CONFIGURACIÓN DE FAT JAR ===================
shadowJar {
    archiveClassifier.set('')
    archiveVersion.set('1.0.0')
    archiveBaseName.set('reliableServer-fat')

    manifest {
        attributes(
                'Main-Class': project.name.capitalize(),
                'Implementation-Title': 'Reliable Message Server',
                'Implementation-Version': project.version
        )
    }

    // Incluir recursos
    from('src/main/resources') {
        into('/')
    }

    // Incluir archivos de configuración específicos
    from('.') {
        include 'rmservice.config'
        into('/')
    }

    // Resolver conflictos de archivos duplicados
    mergeServiceFiles()

    // Excluir archivos problemáticos
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/MANIFEST.MF'

    // Incluir dependencias transitivas
    configurations = [project.configurations.runtimeClasspath]

    // Transformaciones específicas para Kryo
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer)
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'reference.conf'
    }

    doLast {
        println "ReliableServer Fat JAR creado: ${archiveFile.get().asFile.absolutePath}"
        println "Tamaño: ${archiveFile.get().asFile.length() / (1024 * 1024)} MB"
    }
}

// Hacer que 'build' genere el fat jar por defecto
build.dependsOn shadowJar

// =================== JAR NORMAL (THIN) ===================
jar {
    manifest {
        attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
    archiveClassifier.set('thin')
}

// =================== TAREAS ADICIONALES ===================
task runFatJar(type: JavaExec) {
    group = 'application'
    description = 'Ejecuta el reliableServer fat jar generado'
    classpath = files("${buildDir}/libs/reliableServer-fat-1.0.0.jar")
    mainClass = project.name.capitalize()
    dependsOn shadowJar
}

task runReliableServer(type: JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = project.name.capitalize()
}

// Verificar slice generation (SIN dependencia problemática)
task verifySliceGeneration {
    group = 'verification'
    description = 'Verifica que las clases Ice se hayan generado correctamente'
    doLast {
        def generatedDir = file("${buildDir}/generated-src/slice2java")
        if (generatedDir.exists()) {
            println "Clases Ice generadas en: ${generatedDir}"
            fileTree(dir: generatedDir, include: '**/*.java').each {
                println "   - ${it.name}"
            }
        } else {
            println "Advertencia: No se encontraron clases Ice generadas"
        }

        // Verificar que ReliableMessage.ice existe
        def iceFile = file("ReliableMessage.ice")
        if (iceFile.exists()) {
            println "Archivo ReliableMessage.ice encontrado: ${iceFile.absolutePath}"
        } else {
            println "Error: ReliableMessage.ice no encontrado"
        }
    }
}

task verifyProjectStructure {
    group = 'verification'
    description = 'Verifica que todos los archivos necesarios estén presentes'
    doLast {
        println "Verificando estructura del proyecto reliableServer:"
        println "Main-Class será: ${project.name.capitalize()}"

        def mainFiles = [
                'ReliableMessage.ice',
                'rmservice.config',
                'src/main/java'
        ]

        mainFiles.each { fileName ->
            def file = file(fileName)
            if (file.exists()) {
                println "   ✓ ${fileName}"
            } else {
                println "   ✗ ${fileName} - NO ENCONTRADO"
            }
        }

        def javaFiles = fileTree(dir: 'src/main/java', include: '**/*.java')
        println "\nArchivos Java encontrados:"
        javaFiles.each { println "   - ${it.name}" }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
    dependsOn verifyProjectStructure
}

// Ejecutar la verificación de slice después de que se generen
task checkSliceAfterBuild {
    dependsOn build
    finalizedBy verifySliceGeneration
}