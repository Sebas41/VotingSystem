//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ReliableMessage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package reliableMessage;

public class Vote implements java.lang.Cloneable,
                             java.io.Serializable
{
    public String machineId;

    public String vote;

    public long timestamp;

    public int election;

    public Vote()
    {
        this.machineId = "";
        this.vote = "";
    }

    public Vote(String machineId, String vote, long timestamp, int election)
    {
        this.machineId = machineId;
        this.vote = vote;
        this.timestamp = timestamp;
        this.election = election;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Vote r = null;
        if(rhs instanceof Vote)
        {
            r = (Vote)rhs;
        }

        if(r != null)
        {
            if(this.machineId != r.machineId)
            {
                if(this.machineId == null || r.machineId == null || !this.machineId.equals(r.machineId))
                {
                    return false;
                }
            }
            if(this.vote != r.vote)
            {
                if(this.vote == null || r.vote == null || !this.vote.equals(r.vote))
                {
                    return false;
                }
            }
            if(this.timestamp != r.timestamp)
            {
                return false;
            }
            if(this.election != r.election)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::reliableMessage::Vote");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, machineId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, vote);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, timestamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, election);
        return h_;
    }

    public Vote clone()
    {
        Vote c = null;
        try
        {
            c = (Vote)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.machineId);
        ostr.writeString(this.vote);
        ostr.writeLong(this.timestamp);
        ostr.writeInt(this.election);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.machineId = istr.readString();
        this.vote = istr.readString();
        this.timestamp = istr.readLong();
        this.election = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Vote v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Vote ice_read(com.zeroc.Ice.InputStream istr)
    {
        Vote v = new Vote();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Vote> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Vote v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Vote> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Vote.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Vote _nullMarshalValue = new Vote();

    /** @hidden */
    public static final long serialVersionUID = 4088930097079827213L;
}
